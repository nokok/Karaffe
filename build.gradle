import org.apache.tools.ant.filters.FixCrLfFilter

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'java'
    id 'application'
    id 'groovy'
    id 'antlr'
}

group 'net.nokok'
version '0.1'

tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
}

def asmVersion = '7.1'

dependencies {
    antlr "org.antlr:antlr4:4.7.1"
    implementation group: 'org.ow2.asm', name: 'asm', version: asmVersion
    implementation group: 'org.ow2.asm', name: 'asm-commons', version: asmVersion
    implementation group: 'org.ow2.asm', name: 'asm-util', version: asmVersion
    implementation group: 'org.ow2.asm', name: 'asm-tree', version: asmVersion
    implementation group: 'org.ow2.asm', name: 'asm-analysis', version: asmVersion
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

test {
    testLogging {
        events 'passed', 'failed', 'skipped'
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint"
    }
}

generateGrammarSource {
    arguments += [
            '-Xlog',
            '-long-messages',
            '-visitor',
            '-listener',
            '-package', 'org.karaffe.compiler.frontend.karaffe.antlr'
    ]
    outputDirectory = file("${projectDir}/build/tmp_antlr")
}

task filter(type: Copy, dependsOn: generateGrammarSource) {
    from file("${projectDir}/build/tmp_antlr")
    into file("${projectDir}/src/main/java/org/karaffe/compiler/frontend/karaffe/antlr")
    filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("lf"))
}

compileJava.dependsOn filter

startScripts {
    applicationName = 'krfc'
}

startShadowScripts {
    applicationName = 'krfc'
}

mainClassName = "org.karaffe.compiler.Main"

sourceSets {
  test {
    resources {
      srcDirs("src/main/resources", "src/test/resources")
      exclude("**/*_ja.properties")
    }
  }
}

gradle.projectsEvaluated {
  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Werror"
  }
}

compileJava {
  doFirst {
    options.compilerArgs = [
      "--module-path", classpath.asPath
    ]
    classpath = files()
  }
}