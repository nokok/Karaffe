import org.antlr.v4.runtime.*
import org.antlr.v4.runtime.atn.ATNConfigSet
import org.antlr.v4.runtime.dfa.DFA
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeLexer
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeParser
import spock.lang.Specification
import spock.lang.Unroll

class ParserSpec extends Specification {

    private ANTLRErrorListener errorListener = new ANTLRErrorListener() {
        @Override
        void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {
            throw new RuntimeException("fail")
        }

        @Override
        void reportAmbiguity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, boolean exact, BitSet ambigAlts, ATNConfigSet configs) {
            throw new RuntimeException("fail")
        }

        @Override
        void reportAttemptingFullContext(Parser recognizer, DFA dfa, int startIndex, int stopIndex, BitSet conflictingAlts, ATNConfigSet configs) {
            throw new RuntimeException("fail")
        }

        @Override
        void reportContextSensitivity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, int prediction, ATNConfigSet configs) {
            throw new RuntimeException("fail")
        }
    }

    def "intValues"() {
        setup:
        def lexer = new KaraffeLexer(CharStreams.fromString(source))
        lexer.removeErrorListeners()
        lexer.addErrorListener(errorListener)
        def parser = new KaraffeParser(new CommonTokenStream(lexer))
        parser.removeErrorListeners()
        parser.addErrorListener(errorListener)
        def context = parser.literal()

        expect:
        context != null
        context.IntegerLiteral().text == text

        where:
        source || text
        "1"     | "1"
    }

    def "stringLiteral"() {
        setup:
        def lexer = new KaraffeLexer(CharStreams.fromString(source))
        lexer.removeErrorListeners()
        lexer.addErrorListener(errorListener)
        def parser = new KaraffeParser(new CommonTokenStream(lexer))
        parser.removeErrorListeners()
        parser.addErrorListener(errorListener)
        def context = parser.literal()

        expect:
        context != null
        context.StringLiteral().text == text

        where:
        source     || text
        '""'       || '""'
        '"FooBar"' || '"FooBar"'
        '"FooBar\\n"' || '"FooBar\\n"'
    }

    @Unroll
    def "notIntLiteral #sourceText"() {
        expect:
        def lexer = new KaraffeLexer(CharStreams.fromString(sourceText))
        lexer.removeErrorListeners()
        lexer.addErrorListener(errorListener)
        def parser = new KaraffeParser(new CommonTokenStream(lexer))
        parser.removeErrorListeners()
        parser.addErrorListener(errorListener)

        when:
        parser.literal()

        then:
        thrown(RuntimeException)

        where:
        sourceText || _
        "-1" || _
        "a" || _
    }

}