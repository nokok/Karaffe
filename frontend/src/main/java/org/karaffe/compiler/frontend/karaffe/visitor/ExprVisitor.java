package org.karaffe.compiler.frontend.karaffe.visitor;

import org.karaffe.compiler.base.util.Platform;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeBaseVisitor;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeParser;
import org.karaffe.compiler.frontend.karaffe.ast.api.Expression;
import org.karaffe.compiler.frontend.karaffe.ast.api.Operator;
import org.karaffe.compiler.frontend.karaffe.ast.expressions.Apply;
import org.karaffe.compiler.frontend.karaffe.ast.expressions.ExpressionName;
import org.karaffe.compiler.frontend.karaffe.ast.expressions.IntLiteral;
import org.karaffe.compiler.frontend.karaffe.ast.expressions.NewInstance;
import org.karaffe.compiler.frontend.karaffe.ast.names.SimpleName;
import org.karaffe.compiler.frontend.karaffe.ast.names.TypeName;
import org.karaffe.compiler.frontend.karaffe.exceptions.KaraffeSemaException;
import org.karaffe.compiler.frontend.karaffe.listener.PositionContext;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ExprVisitor extends KaraffeBaseVisitor<Expression> implements PositionContext {

    @Override
    public Expression visitExpr(KaraffeParser.ExprContext ctx) {
        if (ctx.additiveExpr() != null) {
            return ctx.additiveExpr().accept(this);
        } else {
            throw new IllegalStateException("null context");
        }
    }

    @Override
    public Expression visitAdditiveExpr(KaraffeParser.AdditiveExprContext ctx) {
        if (ctx.op == null) {
            return ctx.multiplicativeExpr().accept(this);
        }
        Expression leftExpr = ctx.left.accept(new ExprVisitor());
        SimpleName op = (SimpleName) Operator.of(ctx.op);
        Expression rightExpr = ctx.right.accept(new ExprVisitor());
        return new Apply(getPosition(ctx), leftExpr, op, rightExpr);
    }

    @Override
    public Expression visitMultiplicativeExpr(KaraffeParser.MultiplicativeExprContext ctx) {
        if (ctx.op == null) {
            return ctx.primary().accept(this);
        }
        Expression leftExpr = ctx.left.accept(new ExprVisitor());
        SimpleName op = (SimpleName) Operator.of(ctx.op);
        Expression rightExpr = ctx.right.accept(new ExprVisitor());
        return new Apply(getPosition(ctx), leftExpr, op, rightExpr);
    }

    @Override
    public Expression visitPrimary(KaraffeParser.PrimaryContext ctx) {
        if (ctx.methodInvocation() != null) {
            return ctx.methodInvocation().accept(this);
        }
        if (ctx.literal() != null) {
            return ctx.literal().accept(this);
        }
        return ctx.expr().accept(new ExprVisitor());
    }

    @Override
    public Expression visitMethodInvocation(KaraffeParser.MethodInvocationContext ctx) {
        SimpleName name = (SimpleName) ctx.identifier().accept(this);
        KaraffeParser.ArgumentListContext argsContext = ctx.argumentList();
        List<KaraffeParser.ExprContext> exprs = argsContext.expr();
        List<Expression> args = new ArrayList<>(exprs.size());
        for (KaraffeParser.ExprContext expr : exprs) {
            ExprVisitor exprVisitor = new ExprVisitor();
            Expression arg = expr.accept(exprVisitor);
            args.add(arg);
        }
        return new Apply(getPosition(ctx), name, args);
    }

    @Override
    public Expression visitLiteral(KaraffeParser.LiteralContext ctx) {
        if (ctx.intLiteral() != null) {
            return ctx.intLiteral().accept(this);
        } else {
            throw new IllegalStateException("intLiteral null");
        }
    }

    @Override
    public Expression visitIntLiteral(KaraffeParser.IntLiteralContext ctx) {
        try {
            int value = Integer.parseInt(ctx.getText());
            return new NewInstance(getPosition(ctx), new TypeName("Int"), Collections.singletonList(new IntLiteral(value)));
        } catch (NumberFormatException e) {
            throw new KaraffeSemaException();
        }
    }

    @Override
    public Expression visitIdentifier(KaraffeParser.IdentifierContext ctx) {
        return new ExpressionName(ctx.getText());
    }
}
