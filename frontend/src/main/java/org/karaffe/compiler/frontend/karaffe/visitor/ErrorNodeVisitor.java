package org.karaffe.compiler.frontend.karaffe.visitor;

import org.antlr.v4.runtime.ANTLRErrorListener;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.atn.ATNConfigSet;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.karaffe.compiler.base.util.Platform;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeBaseVisitor;
import org.karaffe.compiler.frontend.karaffe.exceptions.KaraffeSemaException;

import java.util.BitSet;

public class ErrorNodeVisitor extends KaraffeBaseVisitor<Void> implements ANTLRErrorListener {
    @Override
    public Void visitErrorNode(ErrorNode node) {
        return super.visitErrorNode(node);
    }

    @Override
    public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) {
        Platform.stdErr("Syntax Error at " + line + ":" + charPositionInLine + " at: " + recognizer.getInputStream().getSourceName());
        Platform.stdErr(msg);
        throw new KaraffeSemaException();
    }

    @Override
    public void reportAmbiguity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, boolean exact, BitSet ambigAlts, ATNConfigSet configs) {

    }

    @Override
    public void reportAttemptingFullContext(Parser recognizer, DFA dfa, int startIndex, int stopIndex, BitSet conflictingAlts, ATNConfigSet configs) {

    }

    @Override
    public void reportContextSensitivity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, int prediction, ATNConfigSet configs) {

    }

}
