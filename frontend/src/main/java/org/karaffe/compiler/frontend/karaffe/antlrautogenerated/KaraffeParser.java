// Generated from Karaffe.g4 by ANTLR 4.7.1
package org.karaffe.compiler.frontend.karaffe.antlrautogenerated;

import org.antlr.v4.runtime.FailedPredicateException;
import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.RuleContext;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class KaraffeParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		FALLTHROUGH=1, EXTENSION=2, PROTEDTED=3, ABSTRACT=4, CONTINUE=5, INTERNAL=6, 
		READONLY=7, PRIVATE=8, IMPORT=9, PUBLIC=10, RETURN=11, SEALED=12, STATIC=13, 
		ASYNC=14, AWAIT=15, BREAK=16, CLASS=17, DEFER=18, FALSE=19, MATCH=20, 
		SUPER=21, THROW=22, WHILE=23, CASE=24, ELSE=25, ENUM=26, FUNC=27, INIT=28, 
		MAIN=29, NULL=30, OPEN=31, THIS=32, TRUE=33, TYPE=34, DEF=35, FOR=36, 
		LET=37, NEW=38, VAR=39, EQEQEQ=40, NOTEQEQ=41, CRANGE=42, AS=43, IS=44, 
		IF=45, IN=46, RANGE=47, POW=48, AND=49, OR=50, EQEQ=51, NOTEQ=52, LE=53, 
		GE=54, ARROW=55, DARROW=56, RARROW=57, GT=58, LT=59, BANG=60, COMMA=61, 
		PLUS=62, MINUS=63, MUL=64, DIV=65, MOD=66, EQ=67, QUOTE=68, DQUOTE=69, 
		LPAREN=70, RPAREN=71, LBRACE=72, RBRACE=73, LBRACK=74, RBRACK=75, SEMI=76, 
		DOT=77, StringLiteral=78, IntegerLiteral=79, Identifier=80, Whitespace=81;
	public static final int
		RULE_compilationUnit = 0, RULE_topLevelStatement = 1, RULE_classDef = 2, 
		RULE_simpleClassDef = 3, RULE_classDefBody = 4, RULE_classDefMemberList = 5, 
		RULE_classDefMember = 6, RULE_mainMethodDef = 7, RULE_statementBlock = 8, 
		RULE_statementList = 9, RULE_statement = 10, RULE_parameterList = 11, 
		RULE_binding = 12, RULE_expr = 13, RULE_simpleExpr = 14, RULE_exprList = 15, 
		RULE_rangeExpr = 16, RULE_orExpr = 17, RULE_andExpr = 18, RULE_equalityExpr = 19, 
		RULE_conditionalExpr = 20, RULE_additiveExpr = 21, RULE_multiplicativeExpr = 22, 
		RULE_powExpr = 23, RULE_unaryExpr = 24, RULE_primary = 25, RULE_literal = 26;
	public static final String[] ruleNames = {
		"compilationUnit", "topLevelStatement", "classDef", "simpleClassDef", 
		"classDefBody", "classDefMemberList", "classDefMember", "mainMethodDef", 
		"statementBlock", "statementList", "statement", "parameterList", "binding", 
		"expr", "simpleExpr", "exprList", "rangeExpr", "orExpr", "andExpr", "equalityExpr", 
		"conditionalExpr", "additiveExpr", "multiplicativeExpr", "powExpr", "unaryExpr", 
		"primary", "literal"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'fallthrough'", "'extension'", "'protected'", "'abstract'", "'continue'", 
		"'internal'", "'readonly'", "'private'", "'import'", "'public'", "'return'", 
		"'sealed'", "'static'", "'async'", "'await'", "'break'", "'class'", "'defer'", 
		"'false'", "'match'", "'super'", "'throw'", "'while'", "'case'", "'else'", 
		"'enum'", "'func'", "'init'", "'main'", "'null'", "'open'", "'this'", 
		"'true'", "'type'", "'def'", "'for'", "'let'", "'new'", "'var'", "'==='", 
		"'!=='", "'..<'", "'as'", "'is'", "'if'", "'in'", "'..'", "'**'", "'&&'", 
		"'||'", "'=='", "'!='", "'<='", "'>='", "'->'", "'=>'", "'<-'", "'>'", 
		"'<'", "'!'", "','", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'''", 
		"'\"'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "FALLTHROUGH", "EXTENSION", "PROTEDTED", "ABSTRACT", "CONTINUE", 
		"INTERNAL", "READONLY", "PRIVATE", "IMPORT", "PUBLIC", "RETURN", "SEALED", 
		"STATIC", "ASYNC", "AWAIT", "BREAK", "CLASS", "DEFER", "FALSE", "MATCH", 
		"SUPER", "THROW", "WHILE", "CASE", "ELSE", "ENUM", "FUNC", "INIT", "MAIN", 
		"NULL", "OPEN", "THIS", "TRUE", "TYPE", "DEF", "FOR", "LET", "NEW", "VAR", 
		"EQEQEQ", "NOTEQEQ", "CRANGE", "AS", "IS", "IF", "IN", "RANGE", "POW", 
		"AND", "OR", "EQEQ", "NOTEQ", "LE", "GE", "ARROW", "DARROW", "RARROW", 
		"GT", "LT", "BANG", "COMMA", "PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", 
		"QUOTE", "DQUOTE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"SEMI", "DOT", "StringLiteral", "IntegerLiteral", "Identifier", "Whitespace"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "Karaffe.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public KaraffeParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class CompilationUnitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(KaraffeParser.EOF, 0); }
		public List<TopLevelStatementContext> topLevelStatement() {
			return getRuleContexts(TopLevelStatementContext.class);
		}
		public TopLevelStatementContext topLevelStatement(int i) {
			return getRuleContext(TopLevelStatementContext.class,i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilationUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterCompilationUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitCompilationUnit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitCompilationUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompilationUnitContext compilationUnit() throws RecognitionException {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(57);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (CLASS - 17)) | (1L << (WHILE - 17)) | (1L << (INIT - 17)) | (1L << (DEF - 17)) | (1L << (LET - 17)) | (1L << (NEW - 17)) | (1L << (IF - 17)) | (1L << (BANG - 17)) | (1L << (PLUS - 17)) | (1L << (MINUS - 17)) | (1L << (LPAREN - 17)) | (1L << (LBRACE - 17)) | (1L << (StringLiteral - 17)) | (1L << (IntegerLiteral - 17)) | (1L << (Identifier - 17)))) != 0)) {
				{
				{
				setState(54);
				topLevelStatement();
				}
				}
				setState(59);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(60);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TopLevelStatementContext extends ParserRuleContext {
		public ClassDefContext classDef() {
			return getRuleContext(ClassDefContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_topLevelStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterTopLevelStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitTopLevelStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitTopLevelStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TopLevelStatementContext topLevelStatement() throws RecognitionException {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_topLevelStatement);
		try {
			setState(64);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLASS:
				enterOuterAlt(_localctx, 1);
				{
				setState(62);
				classDef();
				}
				break;
			case WHILE:
			case INIT:
			case DEF:
			case LET:
			case NEW:
			case IF:
			case BANG:
			case PLUS:
			case MINUS:
			case LPAREN:
			case LBRACE:
			case StringLiteral:
			case IntegerLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(63);
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassDefContext extends ParserRuleContext {
		public SimpleClassDefContext simpleClassDef() {
			return getRuleContext(SimpleClassDefContext.class,0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterClassDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitClassDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitClassDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassDefContext classDef() throws RecognitionException {
		ClassDefContext _localctx = new ClassDefContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_classDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(66);
			simpleClassDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleClassDefContext extends ParserRuleContext {
		public TerminalNode CLASS() { return getToken(KaraffeParser.CLASS, 0); }
		public TerminalNode Identifier() { return getToken(KaraffeParser.Identifier, 0); }
		public ClassDefBodyContext classDefBody() {
			return getRuleContext(ClassDefBodyContext.class,0);
		}
		public SimpleClassDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleClassDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterSimpleClassDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitSimpleClassDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitSimpleClassDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleClassDefContext simpleClassDef() throws RecognitionException {
		SimpleClassDefContext _localctx = new SimpleClassDefContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_simpleClassDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(68);
			match(CLASS);
			setState(69);
			match(Identifier);
			setState(71);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(70);
				classDefBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassDefBodyContext extends ParserRuleContext {
		public TerminalNode LBRACE() { return getToken(KaraffeParser.LBRACE, 0); }
		public TerminalNode RBRACE() { return getToken(KaraffeParser.RBRACE, 0); }
		public ClassDefMemberListContext classDefMemberList() {
			return getRuleContext(ClassDefMemberListContext.class,0);
		}
		public ClassDefMemberContext classDefMember() {
			return getRuleContext(ClassDefMemberContext.class,0);
		}
		public ClassDefBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classDefBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterClassDefBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitClassDefBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitClassDefBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassDefBodyContext classDefBody() throws RecognitionException {
		ClassDefBodyContext _localctx = new ClassDefBodyContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_classDefBody);
		int _la;
		try {
			setState(79);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(73);
				match(LBRACE);
				setState(75);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (INIT - 23)) | (1L << (MAIN - 23)) | (1L << (DEF - 23)) | (1L << (LET - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
					{
					setState(74);
					classDefMemberList();
					}
				}

				setState(77);
				match(RBRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(78);
				classDefMember();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassDefMemberListContext extends ParserRuleContext {
		public ClassDefMemberContext classDefMember() {
			return getRuleContext(ClassDefMemberContext.class,0);
		}
		public ClassDefMemberListContext classDefMemberList() {
			return getRuleContext(ClassDefMemberListContext.class,0);
		}
		public ClassDefMemberListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classDefMemberList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterClassDefMemberList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitClassDefMemberList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitClassDefMemberList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassDefMemberListContext classDefMemberList() throws RecognitionException {
		ClassDefMemberListContext _localctx = new ClassDefMemberListContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_classDefMemberList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(81);
			classDefMember();
			setState(83);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (INIT - 23)) | (1L << (MAIN - 23)) | (1L << (DEF - 23)) | (1L << (LET - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
				{
				setState(82);
				classDefMemberList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassDefMemberContext extends ParserRuleContext {
		public MainMethodDefContext mainMethodDef() {
			return getRuleContext(MainMethodDefContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public ClassDefMemberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classDefMember; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterClassDefMember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitClassDefMember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitClassDefMember(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassDefMemberContext classDefMember() throws RecognitionException {
		ClassDefMemberContext _localctx = new ClassDefMemberContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_classDefMember);
		try {
			setState(87);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(85);
				mainMethodDef();
				}
				break;
			case WHILE:
			case INIT:
			case DEF:
			case LET:
			case NEW:
			case IF:
			case BANG:
			case PLUS:
			case MINUS:
			case LPAREN:
			case LBRACE:
			case StringLiteral:
			case IntegerLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(86);
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MainMethodDefContext extends ParserRuleContext {
		public TerminalNode MAIN() { return getToken(KaraffeParser.MAIN, 0); }
		public StatementBlockContext statementBlock() {
			return getRuleContext(StatementBlockContext.class,0);
		}
		public MainMethodDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mainMethodDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterMainMethodDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitMainMethodDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitMainMethodDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MainMethodDefContext mainMethodDef() throws RecognitionException {
		MainMethodDefContext _localctx = new MainMethodDefContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_mainMethodDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(89);
			match(MAIN);
			setState(90);
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementBlockContext extends ParserRuleContext {
		public TerminalNode LBRACE() { return getToken(KaraffeParser.LBRACE, 0); }
		public TerminalNode RBRACE() { return getToken(KaraffeParser.RBRACE, 0); }
		public StatementListContext statementList() {
			return getRuleContext(StatementListContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterStatementBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitStatementBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitStatementBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementBlockContext statementBlock() throws RecognitionException {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_statementBlock);
		int _la;
		try {
			setState(98);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(92);
				match(LBRACE);
				setState(94);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (INIT - 23)) | (1L << (DEF - 23)) | (1L << (LET - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
					{
					setState(93);
					statementList();
					}
				}

				setState(96);
				match(RBRACE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(97);
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementListContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public StatementListContext statementList() {
			return getRuleContext(StatementListContext.class,0);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterStatementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitStatementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitStatementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementListContext statementList() throws RecognitionException {
		StatementListContext _localctx = new StatementListContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_statementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(100);
			statement();
			setState(102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (INIT - 23)) | (1L << (DEF - 23)) | (1L << (LET - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
				{
				setState(101);
				statementList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public ExprContext exprStmt;
		public Token letStmt;
		public Token name;
		public Token typeName;
		public ExprContext initializer;
		public Token assignTarget;
		public Token def;
		public Token methodName;
		public Token returnTypeName;
		public Token init;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LET() { return getToken(KaraffeParser.LET, 0); }
		public List<TerminalNode> Identifier() { return getTokens(KaraffeParser.Identifier); }
		public TerminalNode Identifier(int i) {
			return getToken(KaraffeParser.Identifier, i);
		}
		public TerminalNode EQ() { return getToken(KaraffeParser.EQ, 0); }
		public TerminalNode LPAREN() { return getToken(KaraffeParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(KaraffeParser.RPAREN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode DEF() { return getToken(KaraffeParser.DEF, 0); }
		public ParameterListContext parameterList() {
			return getRuleContext(ParameterListContext.class,0);
		}
		public TerminalNode INIT() { return getToken(KaraffeParser.INIT, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_statement);
		int _la;
		try {
			setState(132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(104);
				((StatementContext)_localctx).exprStmt = expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(105);
				((StatementContext)_localctx).letStmt = match(LET);
				setState(106);
				((StatementContext)_localctx).name = match(Identifier);
				setState(107);
				((StatementContext)_localctx).typeName = match(Identifier);
				setState(110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ) {
					{
					setState(108);
					match(EQ);
					setState(109);
					((StatementContext)_localctx).initializer = expr();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(112);
				((StatementContext)_localctx).assignTarget = match(Identifier);
				setState(113);
				match(EQ);
				setState(114);
				expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(115);
				((StatementContext)_localctx).def = match(DEF);
				setState(116);
				((StatementContext)_localctx).methodName = match(Identifier);
				setState(117);
				match(LPAREN);
				setState(119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Identifier) {
					{
					setState(118);
					parameterList();
					}
				}

				setState(121);
				match(RPAREN);
				setState(122);
				((StatementContext)_localctx).returnTypeName = match(Identifier);
				setState(123);
				statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(124);
				((StatementContext)_localctx).init = match(INIT);
				setState(129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(125);
					match(LPAREN);
					setState(126);
					parameterList();
					setState(127);
					match(RPAREN);
					}
					break;
				}
				setState(131);
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterListContext extends ParserRuleContext {
		public BindingContext b;
		public BindingContext binding() {
			return getRuleContext(BindingContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(KaraffeParser.COMMA, 0); }
		public ParameterListContext parameterList() {
			return getRuleContext(ParameterListContext.class,0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterParameterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitParameterList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitParameterList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterListContext parameterList() throws RecognitionException {
		ParameterListContext _localctx = new ParameterListContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_parameterList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(134);
			((ParameterListContext)_localctx).b = binding();
			setState(137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(135);
				match(COMMA);
				setState(136);
				parameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BindingContext extends ParserRuleContext {
		public Token name;
		public Token typeName;
		public List<TerminalNode> Identifier() { return getTokens(KaraffeParser.Identifier); }
		public TerminalNode Identifier(int i) {
			return getToken(KaraffeParser.Identifier, i);
		}
		public BindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitBinding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BindingContext binding() throws RecognitionException {
		BindingContext _localctx = new BindingContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_binding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(139);
			((BindingContext)_localctx).name = match(Identifier);
			setState(140);
			((BindingContext)_localctx).typeName = match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public Token ifExpr;
		public ExprContext cond;
		public StatementContext then;
		public StatementContext el;
		public Token loop;
		public StatementContext body;
		public Token block;
		public SimpleExprContext simple;
		public TerminalNode LPAREN() { return getToken(KaraffeParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(KaraffeParser.RPAREN, 0); }
		public TerminalNode IF() { return getToken(KaraffeParser.IF, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(KaraffeParser.ELSE, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public TerminalNode LBRACE() { return getToken(KaraffeParser.LBRACE, 0); }
		public TerminalNode RBRACE() { return getToken(KaraffeParser.RBRACE, 0); }
		public TerminalNode WHILE() { return getToken(KaraffeParser.WHILE, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		ExprContext _localctx = new ExprContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			int _alt;
			setState(183);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF:
				enterOuterAlt(_localctx, 1);
				{
				setState(142);
				((ExprContext)_localctx).ifExpr = match(IF);
				setState(143);
				match(LPAREN);
				setState(144);
				((ExprContext)_localctx).cond = expr();
				setState(145);
				match(RPAREN);
				setState(149);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(146);
						((ExprContext)_localctx).then = statement();
						}
						} 
					}
					setState(151);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
				}
				setState(159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					setState(152);
					match(ELSE);
					setState(156);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(153);
							((ExprContext)_localctx).el = statement();
							}
							} 
						}
						setState(158);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
					}
					}
					break;
				}
				}
				break;
			case WHILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(161);
				((ExprContext)_localctx).loop = match(WHILE);
				setState(162);
				match(LPAREN);
				setState(163);
				((ExprContext)_localctx).cond = expr();
				setState(164);
				match(RPAREN);
				setState(165);
				match(LBRACE);
				setState(169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (INIT - 23)) | (1L << (DEF - 23)) | (1L << (LET - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
					{
					{
					setState(166);
					((ExprContext)_localctx).body = statement();
					}
					}
					setState(171);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(172);
				match(RBRACE);
				}
				break;
			case LBRACE:
				enterOuterAlt(_localctx, 3);
				{
				setState(174);
				((ExprContext)_localctx).block = match(LBRACE);
				setState(178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (INIT - 23)) | (1L << (DEF - 23)) | (1L << (LET - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
					{
					{
					setState(175);
					statement();
					}
					}
					setState(180);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(181);
				match(RBRACE);
				}
				break;
			case NEW:
			case BANG:
			case PLUS:
			case MINUS:
			case LPAREN:
			case StringLiteral:
			case IntegerLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 4);
				{
				setState(182);
				((ExprContext)_localctx).simple = simpleExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleExprContext extends ParserRuleContext {
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterSimpleExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitSimpleExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitSimpleExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_simpleExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(185);
			exprList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public ExprListContext left;
		public Token op;
		public RangeExprContext right;
		public RangeExprContext rangeExpr() {
			return getRuleContext(RangeExprContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(KaraffeParser.COMMA, 0); }
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		return exprList(0);
	}

	private ExprListContext exprList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprListContext _localctx = new ExprListContext(_ctx, _parentState);
		ExprListContext _prevctx = _localctx;
		int _startState = 30;
		enterRecursionRule(_localctx, 30, RULE_exprList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(188);
			rangeExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(195);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprListContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_exprList);
					setState(190);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(191);
					((ExprListContext)_localctx).op = match(COMMA);
					setState(192);
					((ExprListContext)_localctx).right = rangeExpr(0);
					}
					} 
				}
				setState(197);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class RangeExprContext extends ParserRuleContext {
		public RangeExprContext left;
		public Token op;
		public OrExprContext right;
		public OrExprContext orExpr() {
			return getRuleContext(OrExprContext.class,0);
		}
		public RangeExprContext rangeExpr() {
			return getRuleContext(RangeExprContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(KaraffeParser.RANGE, 0); }
		public TerminalNode CRANGE() { return getToken(KaraffeParser.CRANGE, 0); }
		public RangeExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rangeExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterRangeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitRangeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitRangeExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RangeExprContext rangeExpr() throws RecognitionException {
		return rangeExpr(0);
	}

	private RangeExprContext rangeExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		RangeExprContext _localctx = new RangeExprContext(_ctx, _parentState);
		RangeExprContext _prevctx = _localctx;
		int _startState = 32;
		enterRecursionRule(_localctx, 32, RULE_rangeExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(199);
			orExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(206);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RangeExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_rangeExpr);
					setState(201);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(202);
					((RangeExprContext)_localctx).op = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CRANGE || _la==RANGE) ) {
						((RangeExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(203);
					((RangeExprContext)_localctx).right = orExpr(0);
					}
					} 
				}
				setState(208);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OrExprContext extends ParserRuleContext {
		public OrExprContext left;
		public Token op;
		public AndExprContext right;
		public AndExprContext andExpr() {
			return getRuleContext(AndExprContext.class,0);
		}
		public OrExprContext orExpr() {
			return getRuleContext(OrExprContext.class,0);
		}
		public TerminalNode OR() { return getToken(KaraffeParser.OR, 0); }
		public OrExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterOrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitOrExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitOrExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrExprContext orExpr() throws RecognitionException {
		return orExpr(0);
	}

	private OrExprContext orExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OrExprContext _localctx = new OrExprContext(_ctx, _parentState);
		OrExprContext _prevctx = _localctx;
		int _startState = 34;
		enterRecursionRule(_localctx, 34, RULE_orExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(210);
			andExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(217);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OrExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_orExpr);
					setState(212);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(213);
					((OrExprContext)_localctx).op = match(OR);
					setState(214);
					((OrExprContext)_localctx).right = andExpr(0);
					}
					} 
				}
				setState(219);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AndExprContext extends ParserRuleContext {
		public AndExprContext left;
		public Token op;
		public EqualityExprContext right;
		public EqualityExprContext equalityExpr() {
			return getRuleContext(EqualityExprContext.class,0);
		}
		public AndExprContext andExpr() {
			return getRuleContext(AndExprContext.class,0);
		}
		public TerminalNode AND() { return getToken(KaraffeParser.AND, 0); }
		public AndExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_andExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterAndExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitAndExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitAndExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AndExprContext andExpr() throws RecognitionException {
		return andExpr(0);
	}

	private AndExprContext andExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AndExprContext _localctx = new AndExprContext(_ctx, _parentState);
		AndExprContext _prevctx = _localctx;
		int _startState = 36;
		enterRecursionRule(_localctx, 36, RULE_andExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(221);
			equalityExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(228);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_andExpr);
					setState(223);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(224);
					((AndExprContext)_localctx).op = match(AND);
					setState(225);
					((AndExprContext)_localctx).right = equalityExpr(0);
					}
					} 
				}
				setState(230);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class EqualityExprContext extends ParserRuleContext {
		public EqualityExprContext left;
		public Token op;
		public ConditionalExprContext right;
		public ConditionalExprContext conditionalExpr() {
			return getRuleContext(ConditionalExprContext.class,0);
		}
		public EqualityExprContext equalityExpr() {
			return getRuleContext(EqualityExprContext.class,0);
		}
		public TerminalNode EQEQ() { return getToken(KaraffeParser.EQEQ, 0); }
		public TerminalNode NOTEQ() { return getToken(KaraffeParser.NOTEQ, 0); }
		public TerminalNode EQEQEQ() { return getToken(KaraffeParser.EQEQEQ, 0); }
		public TerminalNode NOTEQEQ() { return getToken(KaraffeParser.NOTEQEQ, 0); }
		public EqualityExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equalityExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterEqualityExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitEqualityExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitEqualityExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqualityExprContext equalityExpr() throws RecognitionException {
		return equalityExpr(0);
	}

	private EqualityExprContext equalityExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		EqualityExprContext _localctx = new EqualityExprContext(_ctx, _parentState);
		EqualityExprContext _prevctx = _localctx;
		int _startState = 38;
		enterRecursionRule(_localctx, 38, RULE_equalityExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(232);
			conditionalExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(239);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualityExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_equalityExpr);
					setState(234);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(235);
					((EqualityExprContext)_localctx).op = _input.LT(1);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQEQEQ) | (1L << NOTEQEQ) | (1L << EQEQ) | (1L << NOTEQ))) != 0)) ) {
						((EqualityExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(236);
					((EqualityExprContext)_localctx).right = conditionalExpr(0);
					}
					} 
				}
				setState(241);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConditionalExprContext extends ParserRuleContext {
		public ConditionalExprContext left;
		public Token op;
		public AdditiveExprContext right;
		public AdditiveExprContext additiveExpr() {
			return getRuleContext(AdditiveExprContext.class,0);
		}
		public ConditionalExprContext conditionalExpr() {
			return getRuleContext(ConditionalExprContext.class,0);
		}
		public TerminalNode LE() { return getToken(KaraffeParser.LE, 0); }
		public TerminalNode GE() { return getToken(KaraffeParser.GE, 0); }
		public TerminalNode LT() { return getToken(KaraffeParser.LT, 0); }
		public TerminalNode GT() { return getToken(KaraffeParser.GT, 0); }
		public ConditionalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterConditionalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitConditionalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitConditionalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionalExprContext conditionalExpr() throws RecognitionException {
		return conditionalExpr(0);
	}

	private ConditionalExprContext conditionalExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConditionalExprContext _localctx = new ConditionalExprContext(_ctx, _parentState);
		ConditionalExprContext _prevctx = _localctx;
		int _startState = 40;
		enterRecursionRule(_localctx, 40, RULE_conditionalExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(243);
			additiveExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(250);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_conditionalExpr);
					setState(245);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(246);
					((ConditionalExprContext)_localctx).op = _input.LT(1);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LE) | (1L << GE) | (1L << GT) | (1L << LT))) != 0)) ) {
						((ConditionalExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(247);
					((ConditionalExprContext)_localctx).right = additiveExpr(0);
					}
					} 
				}
				setState(252);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AdditiveExprContext extends ParserRuleContext {
		public AdditiveExprContext left;
		public Token op;
		public MultiplicativeExprContext right;
		public MultiplicativeExprContext multiplicativeExpr() {
			return getRuleContext(MultiplicativeExprContext.class,0);
		}
		public AdditiveExprContext additiveExpr() {
			return getRuleContext(AdditiveExprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(KaraffeParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(KaraffeParser.MINUS, 0); }
		public AdditiveExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additiveExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterAdditiveExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitAdditiveExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitAdditiveExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdditiveExprContext additiveExpr() throws RecognitionException {
		return additiveExpr(0);
	}

	private AdditiveExprContext additiveExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AdditiveExprContext _localctx = new AdditiveExprContext(_ctx, _parentState);
		AdditiveExprContext _prevctx = _localctx;
		int _startState = 42;
		enterRecursionRule(_localctx, 42, RULE_additiveExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(254);
			multiplicativeExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(261);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_additiveExpr);
					setState(256);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(257);
					((AdditiveExprContext)_localctx).op = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((AdditiveExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(258);
					((AdditiveExprContext)_localctx).right = multiplicativeExpr(0);
					}
					} 
				}
				setState(263);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class MultiplicativeExprContext extends ParserRuleContext {
		public MultiplicativeExprContext left;
		public Token op;
		public PrimaryContext right;
		public PowExprContext powExpr() {
			return getRuleContext(PowExprContext.class,0);
		}
		public MultiplicativeExprContext multiplicativeExpr() {
			return getRuleContext(MultiplicativeExprContext.class,0);
		}
		public PrimaryContext primary() {
			return getRuleContext(PrimaryContext.class,0);
		}
		public TerminalNode MUL() { return getToken(KaraffeParser.MUL, 0); }
		public TerminalNode DIV() { return getToken(KaraffeParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(KaraffeParser.MOD, 0); }
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiplicativeExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterMultiplicativeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitMultiplicativeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitMultiplicativeExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiplicativeExprContext multiplicativeExpr() throws RecognitionException {
		return multiplicativeExpr(0);
	}

	private MultiplicativeExprContext multiplicativeExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(_ctx, _parentState);
		MultiplicativeExprContext _prevctx = _localctx;
		int _startState = 44;
		enterRecursionRule(_localctx, 44, RULE_multiplicativeExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(265);
			powExpr();
			}
			_ctx.stop = _input.LT(-1);
			setState(272);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					_localctx.left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpr);
					setState(267);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(268);
					((MultiplicativeExprContext)_localctx).op = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MUL - 64)) | (1L << (DIV - 64)) | (1L << (MOD - 64)))) != 0)) ) {
						((MultiplicativeExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(269);
					((MultiplicativeExprContext)_localctx).right = primary(0);
					}
					} 
				}
				setState(274);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PowExprContext extends ParserRuleContext {
		public UnaryExprContext left;
		public Token op;
		public PowExprContext right;
		public UnaryExprContext unaryExpr() {
			return getRuleContext(UnaryExprContext.class,0);
		}
		public TerminalNode POW() { return getToken(KaraffeParser.POW, 0); }
		public PowExprContext powExpr() {
			return getRuleContext(PowExprContext.class,0);
		}
		public PowExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_powExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterPowExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitPowExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitPowExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PowExprContext powExpr() throws RecognitionException {
		PowExprContext _localctx = new PowExprContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_powExpr);
		try {
			setState(280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(275);
				unaryExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(276);
				((PowExprContext)_localctx).left = unaryExpr();
				setState(277);
				((PowExprContext)_localctx).op = match(POW);
				setState(278);
				((PowExprContext)_localctx).right = powExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryExprContext extends ParserRuleContext {
		public Token op;
		public UnaryExprContext exp;
		public PrimaryContext primary() {
			return getRuleContext(PrimaryContext.class,0);
		}
		public TerminalNode BANG() { return getToken(KaraffeParser.BANG, 0); }
		public UnaryExprContext unaryExpr() {
			return getRuleContext(UnaryExprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(KaraffeParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(KaraffeParser.MINUS, 0); }
		public UnaryExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterUnaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitUnaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitUnaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryExprContext unaryExpr() throws RecognitionException {
		UnaryExprContext _localctx = new UnaryExprContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_unaryExpr);
		try {
			setState(289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEW:
			case LPAREN:
			case StringLiteral:
			case IntegerLiteral:
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(282);
				primary(0);
				}
				break;
			case BANG:
				enterOuterAlt(_localctx, 2);
				{
				setState(283);
				((UnaryExprContext)_localctx).op = match(BANG);
				setState(284);
				((UnaryExprContext)_localctx).exp = unaryExpr();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(285);
				((UnaryExprContext)_localctx).op = match(PLUS);
				setState(286);
				((UnaryExprContext)_localctx).exp = unaryExpr();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(287);
				((UnaryExprContext)_localctx).op = match(MINUS);
				setState(288);
				((UnaryExprContext)_localctx).exp = unaryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryContext extends ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary; }
	 
		public PrimaryContext() { }
		public void copyFrom(PrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CastContext extends PrimaryContext {
		public PrimaryContext castTarget;
		public Token typeName;
		public TerminalNode AS() { return getToken(KaraffeParser.AS, 0); }
		public PrimaryContext primary() {
			return getRuleContext(PrimaryContext.class,0);
		}
		public TerminalNode Identifier() { return getToken(KaraffeParser.Identifier, 0); }
		public CastContext(PrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitCast(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ObjectMethodInvocationContext extends PrimaryContext {
		public PrimaryContext owner;
		public Token methodName;
		public ExprContext args;
		public TerminalNode DOT() { return getToken(KaraffeParser.DOT, 0); }
		public TerminalNode LPAREN() { return getToken(KaraffeParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(KaraffeParser.RPAREN, 0); }
		public PrimaryContext primary() {
			return getRuleContext(PrimaryContext.class,0);
		}
		public TerminalNode Identifier() { return getToken(KaraffeParser.Identifier, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ObjectMethodInvocationContext(PrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterObjectMethodInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitObjectMethodInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitObjectMethodInvocation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LitContext extends PrimaryContext {
		public LiteralContext lit;
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public LitContext(PrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterLit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitLit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitLit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExprContext extends PrimaryContext {
		public Token nested;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RPAREN() { return getToken(KaraffeParser.RPAREN, 0); }
		public TerminalNode LPAREN() { return getToken(KaraffeParser.LPAREN, 0); }
		public NestedExprContext(PrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterNestedExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitNestedExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitNestedExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NewInstanceContext extends PrimaryContext {
		public Token newInstance;
		public Token typeName;
		public ExprContext args;
		public TerminalNode LPAREN() { return getToken(KaraffeParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(KaraffeParser.RPAREN, 0); }
		public TerminalNode NEW() { return getToken(KaraffeParser.NEW, 0); }
		public TerminalNode Identifier() { return getToken(KaraffeParser.Identifier, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public NewInstanceContext(PrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterNewInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitNewInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitNewInstance(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprNameContext extends PrimaryContext {
		public Token exprName;
		public TerminalNode Identifier() { return getToken(KaraffeParser.Identifier, 0); }
		public ExprNameContext(PrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterExprName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitExprName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitExprName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LocalMethodInvocationContext extends PrimaryContext {
		public Token methodName;
		public ExprContext args;
		public TerminalNode LPAREN() { return getToken(KaraffeParser.LPAREN, 0); }
		public TerminalNode RPAREN() { return getToken(KaraffeParser.RPAREN, 0); }
		public TerminalNode Identifier() { return getToken(KaraffeParser.Identifier, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public LocalMethodInvocationContext(PrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterLocalMethodInvocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitLocalMethodInvocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitLocalMethodInvocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryContext primary() throws RecognitionException {
		return primary(0);
	}

	private PrimaryContext primary(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PrimaryContext _localctx = new PrimaryContext(_ctx, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 50;
		enterRecursionRule(_localctx, 50, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				_localctx = new LocalMethodInvocationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(292);
				((LocalMethodInvocationContext)_localctx).methodName = match(Identifier);
				setState(293);
				match(LPAREN);
				setState(295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
					{
					setState(294);
					((LocalMethodInvocationContext)_localctx).args = expr();
					}
				}

				setState(297);
				match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new NewInstanceContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(298);
				((NewInstanceContext)_localctx).newInstance = match(NEW);
				setState(299);
				((NewInstanceContext)_localctx).typeName = match(Identifier);
				setState(300);
				match(LPAREN);
				setState(302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
					{
					setState(301);
					((NewInstanceContext)_localctx).args = expr();
					}
				}

				setState(304);
				match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new LitContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(305);
				((LitContext)_localctx).lit = literal();
				}
				break;
			case 4:
				{
				_localctx = new ExprNameContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(306);
				((ExprNameContext)_localctx).exprName = match(Identifier);
				}
				break;
			case 5:
				{
				_localctx = new NestedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(307);
				((NestedExprContext)_localctx).nested = match(LPAREN);
				setState(308);
				expr();
				setState(309);
				match(RPAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(326);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(324);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
					case 1:
						{
						_localctx = new CastContext(new PrimaryContext(_parentctx, _parentState));
						((CastContext)_localctx).castTarget = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primary);
						setState(313);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(314);
						match(AS);
						setState(315);
						((CastContext)_localctx).typeName = match(Identifier);
						}
						break;
					case 2:
						{
						_localctx = new ObjectMethodInvocationContext(new PrimaryContext(_parentctx, _parentState));
						((ObjectMethodInvocationContext)_localctx).owner = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primary);
						setState(316);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(317);
						match(DOT);
						setState(318);
						((ObjectMethodInvocationContext)_localctx).methodName = match(Identifier);
						setState(319);
						match(LPAREN);
						setState(321);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (WHILE - 23)) | (1L << (NEW - 23)) | (1L << (IF - 23)) | (1L << (BANG - 23)) | (1L << (PLUS - 23)) | (1L << (MINUS - 23)) | (1L << (LPAREN - 23)) | (1L << (LBRACE - 23)) | (1L << (StringLiteral - 23)) | (1L << (IntegerLiteral - 23)) | (1L << (Identifier - 23)))) != 0)) {
							{
							setState(320);
							((ObjectMethodInvocationContext)_localctx).args = expr();
							}
						}

						setState(323);
						match(RPAREN);
						}
						break;
					}
					} 
				}
				setState(328);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode IntegerLiteral() { return getToken(KaraffeParser.IntegerLiteral, 0); }
		public TerminalNode StringLiteral() { return getToken(KaraffeParser.StringLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof KaraffeListener ) ((KaraffeListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof KaraffeVisitor ) return ((KaraffeVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(329);
			_la = _input.LA(1);
			if ( !(_la==StringLiteral || _la==IntegerLiteral) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15:
			return exprList_sempred((ExprListContext)_localctx, predIndex);
		case 16:
			return rangeExpr_sempred((RangeExprContext)_localctx, predIndex);
		case 17:
			return orExpr_sempred((OrExprContext)_localctx, predIndex);
		case 18:
			return andExpr_sempred((AndExprContext)_localctx, predIndex);
		case 19:
			return equalityExpr_sempred((EqualityExprContext)_localctx, predIndex);
		case 20:
			return conditionalExpr_sempred((ConditionalExprContext)_localctx, predIndex);
		case 21:
			return additiveExpr_sempred((AdditiveExprContext)_localctx, predIndex);
		case 22:
			return multiplicativeExpr_sempred((MultiplicativeExprContext)_localctx, predIndex);
		case 25:
			return primary_sempred((PrimaryContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean exprList_sempred(ExprListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean rangeExpr_sempred(RangeExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean orExpr_sempred(OrExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean andExpr_sempred(AndExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean equalityExpr_sempred(EqualityExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean conditionalExpr_sempred(ConditionalExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean additiveExpr_sempred(AdditiveExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean multiplicativeExpr_sempred(MultiplicativeExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 7);
		case 9:
			return precpred(_ctx, 5);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3S\u014e\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\3\2\7\2:\n\2\f\2\16\2=\13\2\3\2\3\2\3\3"+
		"\3\3\5\3C\n\3\3\4\3\4\3\5\3\5\3\5\5\5J\n\5\3\6\3\6\5\6N\n\6\3\6\3\6\5"+
		"\6R\n\6\3\7\3\7\5\7V\n\7\3\b\3\b\5\bZ\n\b\3\t\3\t\3\t\3\n\3\n\5\na\n\n"+
		"\3\n\3\n\5\ne\n\n\3\13\3\13\5\13i\n\13\3\f\3\f\3\f\3\f\3\f\3\f\5\fq\n"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\fz\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\5\f\u0084\n\f\3\f\5\f\u0087\n\f\3\r\3\r\3\r\5\r\u008c\n\r\3\16\3\16"+
		"\3\16\3\17\3\17\3\17\3\17\3\17\7\17\u0096\n\17\f\17\16\17\u0099\13\17"+
		"\3\17\3\17\7\17\u009d\n\17\f\17\16\17\u00a0\13\17\5\17\u00a2\n\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\7\17\u00aa\n\17\f\17\16\17\u00ad\13\17\3\17"+
		"\3\17\3\17\3\17\7\17\u00b3\n\17\f\17\16\17\u00b6\13\17\3\17\3\17\5\17"+
		"\u00ba\n\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u00c4\n\21\f"+
		"\21\16\21\u00c7\13\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u00cf\n\22\f"+
		"\22\16\22\u00d2\13\22\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u00da\n\23\f"+
		"\23\16\23\u00dd\13\23\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u00e5\n\24\f"+
		"\24\16\24\u00e8\13\24\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u00f0\n\25\f"+
		"\25\16\25\u00f3\13\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u00fb\n\26\f"+
		"\26\16\26\u00fe\13\26\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0106\n\27\f"+
		"\27\16\27\u0109\13\27\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u0111\n\30\f"+
		"\30\16\30\u0114\13\30\3\31\3\31\3\31\3\31\3\31\5\31\u011b\n\31\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\5\32\u0124\n\32\3\33\3\33\3\33\3\33\5\33"+
		"\u012a\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u0131\n\33\3\33\3\33\3\33\3"+
		"\33\3\33\3\33\3\33\5\33\u013a\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\5\33\u0144\n\33\3\33\7\33\u0147\n\33\f\33\16\33\u014a\13\33\3\34"+
		"\3\34\3\34\2\13 \"$&(*,.\64\35\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"+
		" \"$&(*,.\60\62\64\66\2\b\4\2,,\61\61\4\2*+\65\66\4\2\678<=\3\2@A\3\2"+
		"BD\3\2PQ\2\u0161\2;\3\2\2\2\4B\3\2\2\2\6D\3\2\2\2\bF\3\2\2\2\nQ\3\2\2"+
		"\2\fS\3\2\2\2\16Y\3\2\2\2\20[\3\2\2\2\22d\3\2\2\2\24f\3\2\2\2\26\u0086"+
		"\3\2\2\2\30\u0088\3\2\2\2\32\u008d\3\2\2\2\34\u00b9\3\2\2\2\36\u00bb\3"+
		"\2\2\2 \u00bd\3\2\2\2\"\u00c8\3\2\2\2$\u00d3\3\2\2\2&\u00de\3\2\2\2(\u00e9"+
		"\3\2\2\2*\u00f4\3\2\2\2,\u00ff\3\2\2\2.\u010a\3\2\2\2\60\u011a\3\2\2\2"+
		"\62\u0123\3\2\2\2\64\u0139\3\2\2\2\66\u014b\3\2\2\28:\5\4\3\298\3\2\2"+
		"\2:=\3\2\2\2;9\3\2\2\2;<\3\2\2\2<>\3\2\2\2=;\3\2\2\2>?\7\2\2\3?\3\3\2"+
		"\2\2@C\5\6\4\2AC\5\26\f\2B@\3\2\2\2BA\3\2\2\2C\5\3\2\2\2DE\5\b\5\2E\7"+
		"\3\2\2\2FG\7\23\2\2GI\7R\2\2HJ\5\n\6\2IH\3\2\2\2IJ\3\2\2\2J\t\3\2\2\2"+
		"KM\7J\2\2LN\5\f\7\2ML\3\2\2\2MN\3\2\2\2NO\3\2\2\2OR\7K\2\2PR\5\16\b\2"+
		"QK\3\2\2\2QP\3\2\2\2R\13\3\2\2\2SU\5\16\b\2TV\5\f\7\2UT\3\2\2\2UV\3\2"+
		"\2\2V\r\3\2\2\2WZ\5\20\t\2XZ\5\26\f\2YW\3\2\2\2YX\3\2\2\2Z\17\3\2\2\2"+
		"[\\\7\37\2\2\\]\5\22\n\2]\21\3\2\2\2^`\7J\2\2_a\5\24\13\2`_\3\2\2\2`a"+
		"\3\2\2\2ab\3\2\2\2be\7K\2\2ce\5\26\f\2d^\3\2\2\2dc\3\2\2\2e\23\3\2\2\2"+
		"fh\5\26\f\2gi\5\24\13\2hg\3\2\2\2hi\3\2\2\2i\25\3\2\2\2j\u0087\5\34\17"+
		"\2kl\7\'\2\2lm\7R\2\2mp\7R\2\2no\7E\2\2oq\5\34\17\2pn\3\2\2\2pq\3\2\2"+
		"\2q\u0087\3\2\2\2rs\7R\2\2st\7E\2\2t\u0087\5\34\17\2uv\7%\2\2vw\7R\2\2"+
		"wy\7H\2\2xz\5\30\r\2yx\3\2\2\2yz\3\2\2\2z{\3\2\2\2{|\7I\2\2|}\7R\2\2}"+
		"\u0087\5\26\f\2~\u0083\7\36\2\2\177\u0080\7H\2\2\u0080\u0081\5\30\r\2"+
		"\u0081\u0082\7I\2\2\u0082\u0084\3\2\2\2\u0083\177\3\2\2\2\u0083\u0084"+
		"\3\2\2\2\u0084\u0085\3\2\2\2\u0085\u0087\5\26\f\2\u0086j\3\2\2\2\u0086"+
		"k\3\2\2\2\u0086r\3\2\2\2\u0086u\3\2\2\2\u0086~\3\2\2\2\u0087\27\3\2\2"+
		"\2\u0088\u008b\5\32\16\2\u0089\u008a\7?\2\2\u008a\u008c\5\30\r\2\u008b"+
		"\u0089\3\2\2\2\u008b\u008c\3\2\2\2\u008c\31\3\2\2\2\u008d\u008e\7R\2\2"+
		"\u008e\u008f\7R\2\2\u008f\33\3\2\2\2\u0090\u0091\7/\2\2\u0091\u0092\7"+
		"H\2\2\u0092\u0093\5\34\17\2\u0093\u0097\7I\2\2\u0094\u0096\5\26\f\2\u0095"+
		"\u0094\3\2\2\2\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3\2"+
		"\2\2\u0098\u00a1\3\2\2\2\u0099\u0097\3\2\2\2\u009a\u009e\7\33\2\2\u009b"+
		"\u009d\5\26\f\2\u009c\u009b\3\2\2\2\u009d\u00a0\3\2\2\2\u009e\u009c\3"+
		"\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a2\3\2\2\2\u00a0\u009e\3\2\2\2\u00a1"+
		"\u009a\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00ba\3\2\2\2\u00a3\u00a4\7\31"+
		"\2\2\u00a4\u00a5\7H\2\2\u00a5\u00a6\5\34\17\2\u00a6\u00a7\7I\2\2\u00a7"+
		"\u00ab\7J\2\2\u00a8\u00aa\5\26\f\2\u00a9\u00a8\3\2\2\2\u00aa\u00ad\3\2"+
		"\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ae\3\2\2\2\u00ad"+
		"\u00ab\3\2\2\2\u00ae\u00af\7K\2\2\u00af\u00ba\3\2\2\2\u00b0\u00b4\7J\2"+
		"\2\u00b1\u00b3\5\26\f\2\u00b2\u00b1\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4"+
		"\u00b2\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5\u00b7\3\2\2\2\u00b6\u00b4\3\2"+
		"\2\2\u00b7\u00ba\7K\2\2\u00b8\u00ba\5\36\20\2\u00b9\u0090\3\2\2\2\u00b9"+
		"\u00a3\3\2\2\2\u00b9\u00b0\3\2\2\2\u00b9\u00b8\3\2\2\2\u00ba\35\3\2\2"+
		"\2\u00bb\u00bc\5 \21\2\u00bc\37\3\2\2\2\u00bd\u00be\b\21\1\2\u00be\u00bf"+
		"\5\"\22\2\u00bf\u00c5\3\2\2\2\u00c0\u00c1\f\3\2\2\u00c1\u00c2\7?\2\2\u00c2"+
		"\u00c4\5\"\22\2\u00c3\u00c0\3\2\2\2\u00c4\u00c7\3\2\2\2\u00c5\u00c3\3"+
		"\2\2\2\u00c5\u00c6\3\2\2\2\u00c6!\3\2\2\2\u00c7\u00c5\3\2\2\2\u00c8\u00c9"+
		"\b\22\1\2\u00c9\u00ca\5$\23\2\u00ca\u00d0\3\2\2\2\u00cb\u00cc\f\3\2\2"+
		"\u00cc\u00cd\t\2\2\2\u00cd\u00cf\5$\23\2\u00ce\u00cb\3\2\2\2\u00cf\u00d2"+
		"\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1#\3\2\2\2\u00d2"+
		"\u00d0\3\2\2\2\u00d3\u00d4\b\23\1\2\u00d4\u00d5\5&\24\2\u00d5\u00db\3"+
		"\2\2\2\u00d6\u00d7\f\3\2\2\u00d7\u00d8\7\64\2\2\u00d8\u00da\5&\24\2\u00d9"+
		"\u00d6\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9\3\2\2\2\u00db\u00dc\3\2"+
		"\2\2\u00dc%\3\2\2\2\u00dd\u00db\3\2\2\2\u00de\u00df\b\24\1\2\u00df\u00e0"+
		"\5(\25\2\u00e0\u00e6\3\2\2\2\u00e1\u00e2\f\3\2\2\u00e2\u00e3\7\63\2\2"+
		"\u00e3\u00e5\5(\25\2\u00e4\u00e1\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4"+
		"\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\'\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9"+
		"\u00ea\b\25\1\2\u00ea\u00eb\5*\26\2\u00eb\u00f1\3\2\2\2\u00ec\u00ed\f"+
		"\3\2\2\u00ed\u00ee\t\3\2\2\u00ee\u00f0\5*\26\2\u00ef\u00ec\3\2\2\2\u00f0"+
		"\u00f3\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2)\3\2\2\2"+
		"\u00f3\u00f1\3\2\2\2\u00f4\u00f5\b\26\1\2\u00f5\u00f6\5,\27\2\u00f6\u00fc"+
		"\3\2\2\2\u00f7\u00f8\f\3\2\2\u00f8\u00f9\t\4\2\2\u00f9\u00fb\5,\27\2\u00fa"+
		"\u00f7\3\2\2\2\u00fb\u00fe\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3\2"+
		"\2\2\u00fd+\3\2\2\2\u00fe\u00fc\3\2\2\2\u00ff\u0100\b\27\1\2\u0100\u0101"+
		"\5.\30\2\u0101\u0107\3\2\2\2\u0102\u0103\f\3\2\2\u0103\u0104\t\5\2\2\u0104"+
		"\u0106\5.\30\2\u0105\u0102\3\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2"+
		"\2\2\u0107\u0108\3\2\2\2\u0108-\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u010b"+
		"\b\30\1\2\u010b\u010c\5\60\31\2\u010c\u0112\3\2\2\2\u010d\u010e\f\3\2"+
		"\2\u010e\u010f\t\6\2\2\u010f\u0111\5\64\33\2\u0110\u010d\3\2\2\2\u0111"+
		"\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113/\3\2\2\2"+
		"\u0114\u0112\3\2\2\2\u0115\u011b\5\62\32\2\u0116\u0117\5\62\32\2\u0117"+
		"\u0118\7\62\2\2\u0118\u0119\5\60\31\2\u0119\u011b\3\2\2\2\u011a\u0115"+
		"\3\2\2\2\u011a\u0116\3\2\2\2\u011b\61\3\2\2\2\u011c\u0124\5\64\33\2\u011d"+
		"\u011e\7>\2\2\u011e\u0124\5\62\32\2\u011f\u0120\7@\2\2\u0120\u0124\5\62"+
		"\32\2\u0121\u0122\7A\2\2\u0122\u0124\5\62\32\2\u0123\u011c\3\2\2\2\u0123"+
		"\u011d\3\2\2\2\u0123\u011f\3\2\2\2\u0123\u0121\3\2\2\2\u0124\63\3\2\2"+
		"\2\u0125\u0126\b\33\1\2\u0126\u0127\7R\2\2\u0127\u0129\7H\2\2\u0128\u012a"+
		"\5\34\17\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b\3\2\2\2"+
		"\u012b\u013a\7I\2\2\u012c\u012d\7(\2\2\u012d\u012e\7R\2\2\u012e\u0130"+
		"\7H\2\2\u012f\u0131\5\34\17\2\u0130\u012f\3\2\2\2\u0130\u0131\3\2\2\2"+
		"\u0131\u0132\3\2\2\2\u0132\u013a\7I\2\2\u0133\u013a\5\66\34\2\u0134\u013a"+
		"\7R\2\2\u0135\u0136\7H\2\2\u0136\u0137\5\34\17\2\u0137\u0138\7I\2\2\u0138"+
		"\u013a\3\2\2\2\u0139\u0125\3\2\2\2\u0139\u012c\3\2\2\2\u0139\u0133\3\2"+
		"\2\2\u0139\u0134\3\2\2\2\u0139\u0135\3\2\2\2\u013a\u0148\3\2\2\2\u013b"+
		"\u013c\f\t\2\2\u013c\u013d\7-\2\2\u013d\u0147\7R\2\2\u013e\u013f\f\7\2"+
		"\2\u013f\u0140\7O\2\2\u0140\u0141\7R\2\2\u0141\u0143\7H\2\2\u0142\u0144"+
		"\5\34\17\2\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145\3\2\2\2"+
		"\u0145\u0147\7I\2\2\u0146\u013b\3\2\2\2\u0146\u013e\3\2\2\2\u0147\u014a"+
		"\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149\65\3\2\2\2\u014a"+
		"\u0148\3\2\2\2\u014b\u014c\t\7\2\2\u014c\67\3\2\2\2\';BIMQUY`dhpy\u0083"+
		"\u0086\u008b\u0097\u009e\u00a1\u00ab\u00b4\u00b9\u00c5\u00d0\u00db\u00e6"+
		"\u00f1\u00fc\u0107\u0112\u011a\u0123\u0129\u0130\u0139\u0143\u0146\u0148";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
