package org.karaffe.compiler.frontend.karaffe.tasks;

import org.antlr.v4.runtime.CharStreams;
import org.karaffe.compiler.base.CompilerContext;
import org.karaffe.compiler.base.task.TaskResult;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeLexer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LexerTask extends AbstractTask {

    private static final Logger LOGGER = LoggerFactory.getLogger(LexerTask.class);

    @Override
    public String name() {
        return "lexing";
    }

    @Override
    public String description() {
        return "Lexical analysis";
    }

    @Override
    public TaskResult run(CompilerContext context) {
        ErrorListener errorListener = new ErrorListener();
        context.sourceFileStream()
                .forEach(file -> {
                    LOGGER.trace("new Lexer for : {} ", file.toPath());
                    KaraffeLexer lexer = new KaraffeLexer(CharStreams.fromString(file.toString()));
                    lexer.removeErrorListeners();
                    lexer.addErrorListener(errorListener);
                    context.addLexer(lexer);
                });
        return errorListener.getResult();
    }

    @Override
    public boolean isRunnable(CompilerContext context) {
        return context.sourceFileStream().count() > 0;
    }

    @Override
    public boolean changed() {
        return false;
    }
}
