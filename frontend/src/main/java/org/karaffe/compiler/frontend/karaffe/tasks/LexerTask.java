package org.karaffe.compiler.frontend.karaffe.tasks;

import org.antlr.v4.runtime.CharStreams;
import org.karaffe.compiler.base.CompilerContext;
import org.karaffe.compiler.base.task.RuntimeTaskException;
import org.karaffe.compiler.base.task.TaskResult;
import org.karaffe.compiler.base.util.SourceFile;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeLexer;

import java.io.IOException;

public class LexerTask extends AbstractTask {

    @Override
    public String name() {
        return "compile";
    }

    @Override
    public String description() {
        return "";
    }

    @Override
    public TaskResult run(CompilerContext context) {
        context.sourceFileStream()
                .map(SourceFile::toPath)
                .forEach(path -> {
                    try {
                        KaraffeLexer lexer = new KaraffeLexer(CharStreams.fromPath(path));
                        lexer.removeErrorListeners();
                        context.addLexer(lexer);
                    } catch (IOException e) {
                        throw new RuntimeTaskException(e);
                    }
                });
        return TaskResult.SUCCESS;
    }

    @Override
    public boolean changed() {
        return false;
    }
}
