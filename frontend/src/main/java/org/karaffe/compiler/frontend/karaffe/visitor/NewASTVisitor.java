package org.karaffe.compiler.frontend.karaffe.visitor;

import org.karaffe.compiler.base.tree.ClassDef;
import org.karaffe.compiler.base.tree.CompilationUnit;
import org.karaffe.compiler.base.tree.Defs;
import org.karaffe.compiler.base.tree.TopLevelTree;
import org.karaffe.compiler.base.tree.Tree;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeBaseVisitor;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeParser;

public class NewASTVisitor extends KaraffeBaseVisitor<Tree> implements PositionContext {

    @Override
    public Tree visitCompilationUnit(KaraffeParser.CompilationUnitContext ctx) {
        CompilationUnit compilationUnit = new CompilationUnit();
        for (KaraffeParser.TopLevelStatementContext topLevelStatementContext : ctx.topLevelStatement()) {
            compilationUnit.add((TopLevelTree) topLevelStatementContext.accept(this));
        }
        return compilationUnit;
    }

    @Override
    public Tree visitTopLevelStatement(KaraffeParser.TopLevelStatementContext ctx) {
        KaraffeParser.ClassDefContext classDefContext = ctx.classDef();
        if (classDefContext == null) {
            throw new NullPointerException();
        }
        return classDefContext.accept(this);
    }

    @Override
    public Tree visitClassDef(KaraffeParser.ClassDefContext ctx) {
        KaraffeParser.SimpleClassDefContext simpleClassDefContext = ctx.simpleClassDef();
        if (simpleClassDefContext == null) {
            throw new NullPointerException();
        }
        return simpleClassDefContext.accept(this);
    }

    @Override
    public Tree visitSimpleClassDef(KaraffeParser.SimpleClassDefContext ctx) {
        KaraffeParser.IdentifierContext identifier = ctx.identifier();
        ClassDef c = Defs.Class(identifier.getText());
        c.setPos(getPosition(ctx.CLASS()));
        KaraffeParser.ClassDefBodyContext classDefBodyContext = ctx.classDefBody();
        c.add((Defs) classDefBodyContext.accept(this));
        return c;
    }

}
