package org.karaffe.compiler.frontend.karaffe.visitor;

import org.antlr.v4.runtime.tree.TerminalNode;
import org.karaffe.compiler.base.pos.Position;
import org.karaffe.compiler.base.tree.Tree;
import org.karaffe.compiler.base.tree.Trees;
import org.karaffe.compiler.base.tree.def.Def;
import org.karaffe.compiler.base.tree.def.Defs;
import org.karaffe.compiler.base.tree.expr.Exprs;
import org.karaffe.compiler.base.tree.expr.Operators;
import org.karaffe.compiler.base.tree.term.Name;
import org.karaffe.compiler.base.tree.term.Terms;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeBaseVisitor;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeParser;

import java.util.ArrayList;
import java.util.List;

public class NewASTVisitor extends KaraffeBaseVisitor<Tree> implements PositionContext {

    @Override
    public Tree visitCompilationUnit(KaraffeParser.CompilationUnitContext ctx) {
        Tree.CompilationUnit compilationUnit = Trees.compilationUnit();
        compilationUnit.setPos(Position.of(ctx.getStart()));
        List<KaraffeParser.TopLevelStatementContext> topLevelStatementContexts = ctx.topLevelStatement();
        for (KaraffeParser.TopLevelStatementContext topLevelStatementContext : topLevelStatementContexts) {
            compilationUnit.addTopLevel(topLevelStatementContext.accept(this));
        }
        return compilationUnit;
    }

    @Override
    public Tree visitTopLevelStatement(KaraffeParser.TopLevelStatementContext ctx) {
        KaraffeParser.ClassDefContext classDefContext = ctx.classDef();
        if (classDefContext == null) {
            throw new NullPointerException();
        }
        return classDefContext.accept(this);
    }

    @Override
    public Tree visitClassDef(KaraffeParser.ClassDefContext ctx) {
        KaraffeParser.SimpleClassDefContext simpleClassDefContext = ctx.simpleClassDef();
        if (simpleClassDefContext == null) {
            throw new NullPointerException();
        }
        return simpleClassDefContext.accept(this);
    }

    @Override
    public Tree visitSimpleClassDef(KaraffeParser.SimpleClassDefContext ctx) {
        TerminalNode identifier = ctx.Identifier();
        Def c = Defs.classDef(identifier.getText());
        c.setPos(getPosition(ctx.CLASS()));
        KaraffeParser.ClassDefBodyContext classDefBodyContext = ctx.classDefBody();
        c.addBody(classDefBodyContext.accept(this));
        return c;
    }

    @Override
    public Tree visitClassDefBody(KaraffeParser.ClassDefBodyContext ctx) {
        List<KaraffeParser.ClassDefMemberContext> classDefMemberContexts = ctx.classDefMember();
        Tree.Template template = Trees.template();
        for (KaraffeParser.ClassDefMemberContext classDefMemberContext : classDefMemberContexts) {
            template.addChild(classDefMemberContext.accept(this));
        }
        return template;
    }

    @Override
    public Tree visitClassDefMember(KaraffeParser.ClassDefMemberContext ctx) {
        KaraffeParser.MainMethodDefContext mainMethodDefContext = ctx.mainMethodDef();
        if (mainMethodDefContext == null) {
            throw new NullPointerException();
        }
        return mainMethodDefContext.accept(this);
    }

    @Override
    public Tree visitMainMethodDef(KaraffeParser.MainMethodDefContext ctx) {
        Def mainMethodDef = Defs.mainMethodDef();
        List<KaraffeParser.StatementContext> statements = ctx.statement();
        for (KaraffeParser.StatementContext statementContext : statements) {
            mainMethodDef.addBody(statementContext.accept(this));
        }
        return mainMethodDef;
    }

    @Override
    public Tree visitStatement(KaraffeParser.StatementContext ctx) {
        KaraffeParser.ExprContext exprContext = ctx.expr();
        if (exprContext == null) {
            throw new NullPointerException();
        }
        return exprContext.accept(this);
    }

    @Override
    public Tree visitExpr(KaraffeParser.ExprContext ctx) {
        KaraffeParser.AdditiveExprContext additiveExprContext = ctx.additiveExpr();
        if (additiveExprContext == null) {
            throw new NullPointerException();
        }
        return additiveExprContext.accept(this);
    }

    @Override
    public Tree visitAdditiveExpr(KaraffeParser.AdditiveExprContext ctx) {
        if (ctx.op == null) {
            return ctx.multiplicativeExpr().accept(this);
        }
        return Exprs.apply(
                ctx.left.accept(this),
                Operators.byToken(ctx.op),
                ctx.right.accept(this)
        );
    }

    @Override
    public Tree visitMultiplicativeExpr(KaraffeParser.MultiplicativeExprContext ctx) {
        if (ctx.op == null) {
            return ctx.primary().accept(this);
        }
        return Exprs.apply(
                ctx.left.accept(this),
                Operators.byToken(ctx.op),
                ctx.right.accept(this)
        );
    }

    @Override
    public Tree visitPrimary(KaraffeParser.PrimaryContext ctx) {
        KaraffeParser.LiteralContext literalContext = ctx.literal();
        KaraffeParser.ExprContext nestedExprContext = ctx.expr();
        if (literalContext != null) {
            return literalContext.accept(this);
        }
        if (nestedExprContext != null) {
            return nestedExprContext.accept(this);
        }
        if (ctx.methodName != null) {
            Name ownerName;
            if (ctx.owner == null) {
                ownerName = Terms.thisName();
            } else {
                ownerName = Terms.varName(ctx.owner.getText());
                ownerName.setPos(Position.of(ctx.owner.getStart()));
            }
            return Exprs.apply(
                    ownerName,
                    Terms.varName(ctx.methodName.getText()),
                    ctx.argumentList().accept(this));
        }
        throw new IllegalStateException();
    }

    @Override
    public Tree visitLiteral(KaraffeParser.LiteralContext ctx) {
        KaraffeParser.IntLiteralContext intLiteralContext = ctx.intLiteral();
        if (intLiteralContext != null) {
            return intLiteralContext.accept(this);
        }
        throw new IllegalStateException();
    }

    @Override
    public Tree visitIntLiteral(KaraffeParser.IntLiteralContext ctx) {
        TerminalNode intLiteralNode = ctx.IntegerLiteral();
        return Exprs.intValue(intLiteralNode);
    }

    @Override
    public Tree visitArgumentList(KaraffeParser.ArgumentListContext ctx) {
        List<KaraffeParser.ExprContext> exprContexts = ctx.expr();
        List<Tree> accepts = new ArrayList<>();
        for (KaraffeParser.ExprContext exprContext : exprContexts) {
            accepts.add(exprContext.accept(this));
        }
        return Exprs.tuple(accepts);
    }
}
