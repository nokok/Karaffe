package org.karaffe.compiler.frontend.karaffe.visitor;

import org.antlr.v4.runtime.Token;
import org.karaffe.compiler.base.tree.Elements;
import org.karaffe.compiler.base.tree.Tree;
import org.karaffe.compiler.base.tree.element.ClassDef;
import org.karaffe.compiler.base.tree.element.Defs;
import org.karaffe.compiler.base.tree.element.MethodDef;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeBaseVisitor;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeParser;

import java.util.List;

public class NewASTVisitor extends KaraffeBaseVisitor<Tree> implements PositionContext {

    @Override
    public Tree visitCompilationUnit(KaraffeParser.CompilationUnitContext ctx) {
        Tree compilationUnit = Elements.compilationUnit();
        ctx.accept(this);
        return compilationUnit;
    }

    @Override
    public Tree visitTopLevelStatement(KaraffeParser.TopLevelStatementContext ctx) {
        KaraffeParser.ClassDefContext classDefContext = ctx.classDef();
        if (classDefContext == null) {
            throw new NullPointerException();
        }
        return classDefContext.accept(this);
    }

    @Override
    public Tree visitClassDef(KaraffeParser.ClassDefContext ctx) {
        KaraffeParser.SimpleClassDefContext simpleClassDefContext = ctx.simpleClassDef();
        if (simpleClassDefContext == null) {
            throw new NullPointerException();
        }
        return simpleClassDefContext.accept(this);
    }

    @Override
    public Tree visitSimpleClassDef(KaraffeParser.SimpleClassDefContext ctx) {
        KaraffeParser.IdentifierContext identifier = ctx.identifier();
        ClassDef c = Defs.classDef(identifier.getText());
        c.setPos(getPosition(ctx.CLASS()));
        KaraffeParser.ClassDefBodyContext classDefBodyContext = ctx.classDefBody();
        Tree accept = classDefBodyContext.accept(this);
        return c;
    }

    @Override
    public Tree visitClassDefBody(KaraffeParser.ClassDefBodyContext ctx) {
        List<KaraffeParser.ClassDefMemberContext> classDefMemberContexts = ctx.classDefMember();
        for (KaraffeParser.ClassDefMemberContext classDefMemberContext : classDefMemberContexts) {
            // TODO
            classDefMemberContext.accept(this);
        }
        return null;
    }

    @Override
    public Tree visitClassDefMember(KaraffeParser.ClassDefMemberContext ctx) {
        KaraffeParser.MainMethodDefContext mainMethodDefContext = ctx.mainMethodDef();
        if (mainMethodDefContext == null) {
            throw new NullPointerException();
        }
        return mainMethodDefContext.accept(this);
    }

    @Override
    public Tree visitMainMethodDef(KaraffeParser.MainMethodDefContext ctx) {
        MethodDef mainMethodDef = Defs.mainMethodDef();
        List<KaraffeParser.StatementContext> statements = ctx.statement();
        for (KaraffeParser.StatementContext statementContext : statements) {
            // TODO
            statementContext.accept(this);
        }
        return mainMethodDef;
    }

    @Override
    public Tree visitStatement(KaraffeParser.StatementContext ctx) {
        KaraffeParser.ExprContext exprContext = ctx.expr();
        if (exprContext == null) {
            throw new NullPointerException();
        }
        return exprContext.accept(this);
    }

    @Override
    public Tree visitExpr(KaraffeParser.ExprContext ctx) {
        KaraffeParser.AdditiveExprContext additiveExprContext = ctx.additiveExpr();
        if (additiveExprContext == null) {
            throw new NullPointerException();
        }
        return additiveExprContext.accept(this);
    }

    @Override
    public Tree visitAdditiveExpr(KaraffeParser.AdditiveExprContext ctx) {
        if (ctx.op == null) {
            return ctx.multiplicativeExpr().accept(this);
        }
        Tree leftExpr = ctx.left.accept(this);
        Token operator = ctx.op;
        Tree rightExpr = ctx.right.accept(this);
        return leftExpr;
    }

    @Override
    public Tree visitMultiplicativeExpr(KaraffeParser.MultiplicativeExprContext ctx) {
        if (ctx.op == null) {
            return ctx.primary().accept(this);
        }
        Tree leftExpr = ctx.left.accept(this);
        Token operator = ctx.op;
        Tree rightExpr = ctx.right.accept(this);
        return leftExpr;
    }

    @Override
    public Tree visitPrimary(KaraffeParser.PrimaryContext ctx) {
        KaraffeParser.LiteralContext literalContext = ctx.literal();
        KaraffeParser.ExprContext nestedExprContext = ctx.expr();
        KaraffeParser.MethodInvocationContext methodInvocationContext = ctx.methodInvocation();
        // TODO
        return null;
    }
}
