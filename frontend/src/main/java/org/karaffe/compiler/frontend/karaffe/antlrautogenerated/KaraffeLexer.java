// Generated from Karaffe.g4 by ANTLR 4.5
package org.karaffe.compiler.frontend.karaffe.antlrautogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class KaraffeLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, CLASS=3, PLUS=4, MINUS=5, MUL=6, DIV=7, LBRACE=8, RBRACE=9, 
		LPAREN=10, RPAREN=11, IntegerLiteral=12, Identifier=13, Whitespace=14;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "CLASS", "PLUS", "MINUS", "MUL", "DIV", "LBRACE", "RBRACE", 
		"LPAREN", "RPAREN", "IntegerLiteral", "Identifier", "IdentifierHead", 
		"IdentifierBody", "NonZeroDigit", "Digit", "Whitespace"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'println'", "'main'", "'class'", "'+'", "'-'", "'*'", "'/'", "'{'", 
		"'}'", "'('", "')'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, "CLASS", "PLUS", "MINUS", "MUL", "DIV", "LBRACE", "RBRACE", 
		"LPAREN", "RPAREN", "IntegerLiteral", "Identifier", "Whitespace"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public KaraffeLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Karaffe.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\20m\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13"+
		"\3\13\3\f\3\f\3\r\3\r\6\rM\n\r\r\r\16\rN\3\r\5\rR\n\r\3\16\3\16\7\16V"+
		"\n\16\f\16\16\16Y\13\16\3\17\3\17\3\20\3\20\5\20_\n\20\3\21\3\21\3\22"+
		"\3\22\5\22e\n\22\3\23\6\23h\n\23\r\23\16\23i\3\23\3\23\2\2\24\3\3\5\4"+
		"\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\2\37\2!\2#"+
		"\2%\20\3\2\6\4\2C\\c|\4\2\62;aa\3\2\63;\5\2\13\f\17\17\"\"n\2\3\3\2\2"+
		"\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3"+
		"\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2"+
		"\2\2\33\3\2\2\2\2%\3\2\2\2\3\'\3\2\2\2\5/\3\2\2\2\7\64\3\2\2\2\t:\3\2"+
		"\2\2\13<\3\2\2\2\r>\3\2\2\2\17@\3\2\2\2\21B\3\2\2\2\23D\3\2\2\2\25F\3"+
		"\2\2\2\27H\3\2\2\2\31Q\3\2\2\2\33S\3\2\2\2\35Z\3\2\2\2\37^\3\2\2\2!`\3"+
		"\2\2\2#d\3\2\2\2%g\3\2\2\2\'(\7r\2\2()\7t\2\2)*\7k\2\2*+\7p\2\2+,\7v\2"+
		"\2,-\7n\2\2-.\7p\2\2.\4\3\2\2\2/\60\7o\2\2\60\61\7c\2\2\61\62\7k\2\2\62"+
		"\63\7p\2\2\63\6\3\2\2\2\64\65\7e\2\2\65\66\7n\2\2\66\67\7c\2\2\678\7u"+
		"\2\289\7u\2\29\b\3\2\2\2:;\7-\2\2;\n\3\2\2\2<=\7/\2\2=\f\3\2\2\2>?\7,"+
		"\2\2?\16\3\2\2\2@A\7\61\2\2A\20\3\2\2\2BC\7}\2\2C\22\3\2\2\2DE\7\177\2"+
		"\2E\24\3\2\2\2FG\7*\2\2G\26\3\2\2\2HI\7+\2\2I\30\3\2\2\2JL\5!\21\2KM\5"+
		"#\22\2LK\3\2\2\2MN\3\2\2\2NL\3\2\2\2NO\3\2\2\2OR\3\2\2\2PR\5#\22\2QJ\3"+
		"\2\2\2QP\3\2\2\2R\32\3\2\2\2SW\5\35\17\2TV\5\37\20\2UT\3\2\2\2VY\3\2\2"+
		"\2WU\3\2\2\2WX\3\2\2\2X\34\3\2\2\2YW\3\2\2\2Z[\t\2\2\2[\36\3\2\2\2\\_"+
		"\5\35\17\2]_\t\3\2\2^\\\3\2\2\2^]\3\2\2\2_ \3\2\2\2`a\t\4\2\2a\"\3\2\2"+
		"\2be\7\62\2\2ce\5!\21\2db\3\2\2\2dc\3\2\2\2e$\3\2\2\2fh\t\5\2\2gf\3\2"+
		"\2\2hi\3\2\2\2ig\3\2\2\2ij\3\2\2\2jk\3\2\2\2kl\b\23\2\2l&\3\2\2\2\t\2"+
		"NQW^di\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}