// Generated from Karaffe.g4 by ANTLR 4.7.1
package org.karaffe.compiler.frontend.karaffe.antlrautogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class KaraffeLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CLASS=1, WHILE=2, SUPER=3, MAIN=4, ELSE=5, THIS=6, INIT=7, NEW=8, LET=9, 
		DEF=10, AS=11, IS=12, EQEQEQ=13, NOTEQEQ=14, CRANGE=15, RANGE=16, IF=17, 
		POW=18, AND=19, OR=20, EQEQ=21, NOTEQ=22, LE=23, GE=24, GT=25, LT=26, 
		BANG=27, COMMA=28, PLUS=29, MINUS=30, MUL=31, DIV=32, MOD=33, EQ=34, QUOTE=35, 
		DQUOTE=36, LPAREN=37, RPAREN=38, LBRACE=39, RBRACE=40, LBRACK=41, RBRACK=42, 
		SEMI=43, DOT=44, StringLiteral=45, IntegerLiteral=46, Identifier=47, Whitespace=48;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"CLASS", "WHILE", "SUPER", "MAIN", "ELSE", "THIS", "INIT", "NEW", "LET", 
		"DEF", "AS", "IS", "EQEQEQ", "NOTEQEQ", "CRANGE", "RANGE", "IF", "POW", 
		"AND", "OR", "EQEQ", "NOTEQ", "LE", "GE", "GT", "LT", "BANG", "COMMA", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", "QUOTE", "DQUOTE", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "DOT", "StringLiteral", 
		"StringChars", "StringChar", "EscapeSeq", "IntegerLiteral", "Identifier", 
		"IdentifierHead", "IdentifierBody", "NonZeroDigit", "Digit", "Whitespace"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'class'", "'while'", "'super'", "'main'", "'else'", "'this'", "'init'", 
		"'new'", "'let'", "'def'", "'as'", "'is'", "'==='", "'!=='", "'..<'", 
		"'..'", "'if'", "'**'", "'&&'", "'||'", "'=='", "'!='", "'<='", "'>='", 
		"'>'", "'<'", "'!'", "','", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", 
		"'''", "'\"'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "CLASS", "WHILE", "SUPER", "MAIN", "ELSE", "THIS", "INIT", "NEW", 
		"LET", "DEF", "AS", "IS", "EQEQEQ", "NOTEQEQ", "CRANGE", "RANGE", "IF", 
		"POW", "AND", "OR", "EQEQ", "NOTEQ", "LE", "GE", "GT", "LT", "BANG", "COMMA", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", "QUOTE", "DQUOTE", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "DOT", "StringLiteral", 
		"IntegerLiteral", "Identifier", "Whitespace"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public KaraffeLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Karaffe.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62\u012d\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\3\2\3\2\3\2\3\2\3\2\3\2\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3"+
		"\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t"+
		"\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16"+
		"\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\22"+
		"\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26"+
		"\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\34"+
		"\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3"+
		"%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\5.\u00fb"+
		"\n.\3.\3.\3/\6/\u0100\n/\r/\16/\u0101\3\60\3\60\5\60\u0106\n\60\3\61\3"+
		"\61\3\61\3\62\3\62\6\62\u010d\n\62\r\62\16\62\u010e\3\62\5\62\u0112\n"+
		"\62\3\63\3\63\7\63\u0116\n\63\f\63\16\63\u0119\13\63\3\64\3\64\3\65\3"+
		"\65\5\65\u011f\n\65\3\66\3\66\3\67\3\67\5\67\u0125\n\67\38\68\u0128\n"+
		"8\r8\168\u0129\38\38\2\29\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25"+
		"\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32"+
		"\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\2_\2a\2"+
		"c\60e\61g\2i\2k\2m\2o\62\3\2\b\6\2\f\f\17\17$$^^\n\2$$))^^ddhhppttvw\4"+
		"\2C\\c|\4\2\62;aa\3\2\63;\5\2\13\f\17\17\"\"\2\u012e\2\3\3\2\2\2\2\5\3"+
		"\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2"+
		"\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3"+
		"\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'"+
		"\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63"+
		"\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2"+
		"?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3"+
		"\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2"+
		"\2\2Y\3\2\2\2\2[\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2o\3\2\2\2\3q\3\2\2\2\5"+
		"w\3\2\2\2\7}\3\2\2\2\t\u0083\3\2\2\2\13\u0088\3\2\2\2\r\u008d\3\2\2\2"+
		"\17\u0092\3\2\2\2\21\u0097\3\2\2\2\23\u009b\3\2\2\2\25\u009f\3\2\2\2\27"+
		"\u00a3\3\2\2\2\31\u00a6\3\2\2\2\33\u00a9\3\2\2\2\35\u00ad\3\2\2\2\37\u00b1"+
		"\3\2\2\2!\u00b5\3\2\2\2#\u00b8\3\2\2\2%\u00bb\3\2\2\2\'\u00be\3\2\2\2"+
		")\u00c1\3\2\2\2+\u00c4\3\2\2\2-\u00c7\3\2\2\2/\u00ca\3\2\2\2\61\u00cd"+
		"\3\2\2\2\63\u00d0\3\2\2\2\65\u00d2\3\2\2\2\67\u00d4\3\2\2\29\u00d6\3\2"+
		"\2\2;\u00d8\3\2\2\2=\u00da\3\2\2\2?\u00dc\3\2\2\2A\u00de\3\2\2\2C\u00e0"+
		"\3\2\2\2E\u00e2\3\2\2\2G\u00e4\3\2\2\2I\u00e6\3\2\2\2K\u00e8\3\2\2\2M"+
		"\u00ea\3\2\2\2O\u00ec\3\2\2\2Q\u00ee\3\2\2\2S\u00f0\3\2\2\2U\u00f2\3\2"+
		"\2\2W\u00f4\3\2\2\2Y\u00f6\3\2\2\2[\u00f8\3\2\2\2]\u00ff\3\2\2\2_\u0105"+
		"\3\2\2\2a\u0107\3\2\2\2c\u0111\3\2\2\2e\u0113\3\2\2\2g\u011a\3\2\2\2i"+
		"\u011e\3\2\2\2k\u0120\3\2\2\2m\u0124\3\2\2\2o\u0127\3\2\2\2qr\7e\2\2r"+
		"s\7n\2\2st\7c\2\2tu\7u\2\2uv\7u\2\2v\4\3\2\2\2wx\7y\2\2xy\7j\2\2yz\7k"+
		"\2\2z{\7n\2\2{|\7g\2\2|\6\3\2\2\2}~\7u\2\2~\177\7w\2\2\177\u0080\7r\2"+
		"\2\u0080\u0081\7g\2\2\u0081\u0082\7t\2\2\u0082\b\3\2\2\2\u0083\u0084\7"+
		"o\2\2\u0084\u0085\7c\2\2\u0085\u0086\7k\2\2\u0086\u0087\7p\2\2\u0087\n"+
		"\3\2\2\2\u0088\u0089\7g\2\2\u0089\u008a\7n\2\2\u008a\u008b\7u\2\2\u008b"+
		"\u008c\7g\2\2\u008c\f\3\2\2\2\u008d\u008e\7v\2\2\u008e\u008f\7j\2\2\u008f"+
		"\u0090\7k\2\2\u0090\u0091\7u\2\2\u0091\16\3\2\2\2\u0092\u0093\7k\2\2\u0093"+
		"\u0094\7p\2\2\u0094\u0095\7k\2\2\u0095\u0096\7v\2\2\u0096\20\3\2\2\2\u0097"+
		"\u0098\7p\2\2\u0098\u0099\7g\2\2\u0099\u009a\7y\2\2\u009a\22\3\2\2\2\u009b"+
		"\u009c\7n\2\2\u009c\u009d\7g\2\2\u009d\u009e\7v\2\2\u009e\24\3\2\2\2\u009f"+
		"\u00a0\7f\2\2\u00a0\u00a1\7g\2\2\u00a1\u00a2\7h\2\2\u00a2\26\3\2\2\2\u00a3"+
		"\u00a4\7c\2\2\u00a4\u00a5\7u\2\2\u00a5\30\3\2\2\2\u00a6\u00a7\7k\2\2\u00a7"+
		"\u00a8\7u\2\2\u00a8\32\3\2\2\2\u00a9\u00aa\7?\2\2\u00aa\u00ab\7?\2\2\u00ab"+
		"\u00ac\7?\2\2\u00ac\34\3\2\2\2\u00ad\u00ae\7#\2\2\u00ae\u00af\7?\2\2\u00af"+
		"\u00b0\7?\2\2\u00b0\36\3\2\2\2\u00b1\u00b2\7\60\2\2\u00b2\u00b3\7\60\2"+
		"\2\u00b3\u00b4\7>\2\2\u00b4 \3\2\2\2\u00b5\u00b6\7\60\2\2\u00b6\u00b7"+
		"\7\60\2\2\u00b7\"\3\2\2\2\u00b8\u00b9\7k\2\2\u00b9\u00ba\7h\2\2\u00ba"+
		"$\3\2\2\2\u00bb\u00bc\7,\2\2\u00bc\u00bd\7,\2\2\u00bd&\3\2\2\2\u00be\u00bf"+
		"\7(\2\2\u00bf\u00c0\7(\2\2\u00c0(\3\2\2\2\u00c1\u00c2\7~\2\2\u00c2\u00c3"+
		"\7~\2\2\u00c3*\3\2\2\2\u00c4\u00c5\7?\2\2\u00c5\u00c6\7?\2\2\u00c6,\3"+
		"\2\2\2\u00c7\u00c8\7#\2\2\u00c8\u00c9\7?\2\2\u00c9.\3\2\2\2\u00ca\u00cb"+
		"\7>\2\2\u00cb\u00cc\7?\2\2\u00cc\60\3\2\2\2\u00cd\u00ce\7@\2\2\u00ce\u00cf"+
		"\7?\2\2\u00cf\62\3\2\2\2\u00d0\u00d1\7@\2\2\u00d1\64\3\2\2\2\u00d2\u00d3"+
		"\7>\2\2\u00d3\66\3\2\2\2\u00d4\u00d5\7#\2\2\u00d58\3\2\2\2\u00d6\u00d7"+
		"\7.\2\2\u00d7:\3\2\2\2\u00d8\u00d9\7-\2\2\u00d9<\3\2\2\2\u00da\u00db\7"+
		"/\2\2\u00db>\3\2\2\2\u00dc\u00dd\7,\2\2\u00dd@\3\2\2\2\u00de\u00df\7\61"+
		"\2\2\u00dfB\3\2\2\2\u00e0\u00e1\7\'\2\2\u00e1D\3\2\2\2\u00e2\u00e3\7?"+
		"\2\2\u00e3F\3\2\2\2\u00e4\u00e5\7)\2\2\u00e5H\3\2\2\2\u00e6\u00e7\7$\2"+
		"\2\u00e7J\3\2\2\2\u00e8\u00e9\7*\2\2\u00e9L\3\2\2\2\u00ea\u00eb\7+\2\2"+
		"\u00ebN\3\2\2\2\u00ec\u00ed\7}\2\2\u00edP\3\2\2\2\u00ee\u00ef\7\177\2"+
		"\2\u00efR\3\2\2\2\u00f0\u00f1\7]\2\2\u00f1T\3\2\2\2\u00f2\u00f3\7_\2\2"+
		"\u00f3V\3\2\2\2\u00f4\u00f5\7=\2\2\u00f5X\3\2\2\2\u00f6\u00f7\7\60\2\2"+
		"\u00f7Z\3\2\2\2\u00f8\u00fa\5I%\2\u00f9\u00fb\5]/\2\u00fa\u00f9\3\2\2"+
		"\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fd\5I%\2\u00fd\\\3"+
		"\2\2\2\u00fe\u0100\5_\60\2\u00ff\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101"+
		"\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102^\3\2\2\2\u0103\u0106\n\2\2\2"+
		"\u0104\u0106\5a\61\2\u0105\u0103\3\2\2\2\u0105\u0104\3\2\2\2\u0106`\3"+
		"\2\2\2\u0107\u0108\7^\2\2\u0108\u0109\t\3\2\2\u0109b\3\2\2\2\u010a\u010c"+
		"\5k\66\2\u010b\u010d\5m\67\2\u010c\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e"+
		"\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u0112\5m"+
		"\67\2\u0111\u010a\3\2\2\2\u0111\u0110\3\2\2\2\u0112d\3\2\2\2\u0113\u0117"+
		"\5g\64\2\u0114\u0116\5i\65\2\u0115\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117"+
		"\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118f\3\2\2\2\u0119\u0117\3\2\2\2"+
		"\u011a\u011b\t\4\2\2\u011bh\3\2\2\2\u011c\u011f\5g\64\2\u011d\u011f\t"+
		"\5\2\2\u011e\u011c\3\2\2\2\u011e\u011d\3\2\2\2\u011fj\3\2\2\2\u0120\u0121"+
		"\t\6\2\2\u0121l\3\2\2\2\u0122\u0125\7\62\2\2\u0123\u0125\5k\66\2\u0124"+
		"\u0122\3\2\2\2\u0124\u0123\3\2\2\2\u0125n\3\2\2\2\u0126\u0128\t\7\2\2"+
		"\u0127\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a"+
		"\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\b8\2\2\u012cp\3\2\2\2\f\2\u00fa"+
		"\u0101\u0105\u010e\u0111\u0117\u011e\u0124\u0129\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
