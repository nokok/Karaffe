// Generated from Karaffe.g4 by ANTLR 4.7.1
package org.karaffe.compiler.frontend.karaffe.antlrautogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class KaraffeLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CLASS=1, MAIN=2, COMMA=3, PLUS=4, MINUS=5, MUL=6, DIV=7, LBRACE=8, RBRACE=9, 
		LPAREN=10, RPAREN=11, DOT=12, IntegerLiteral=13, Identifier=14, Whitespace=15;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"CLASS", "MAIN", "COMMA", "PLUS", "MINUS", "MUL", "DIV", "LBRACE", "RBRACE", 
		"LPAREN", "RPAREN", "DOT", "IntegerLiteral", "Identifier", "IdentifierHead", 
		"IdentifierBody", "NonZeroDigit", "Digit", "Whitespace"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'class'", "'main'", "','", "'+'", "'-'", "'*'", "'/'", "'{'", "'}'", 
		"'('", "')'", "'.'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "CLASS", "MAIN", "COMMA", "PLUS", "MINUS", "MUL", "DIV", "LBRACE", 
		"RBRACE", "LPAREN", "RPAREN", "DOT", "IntegerLiteral", "Identifier", "Whitespace"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public KaraffeLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Karaffe.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\21k\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3"+
		"\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3"+
		"\r\3\r\3\16\3\16\6\16K\n\16\r\16\16\16L\3\16\5\16P\n\16\3\17\3\17\7\17"+
		"T\n\17\f\17\16\17W\13\17\3\20\3\20\3\21\3\21\5\21]\n\21\3\22\3\22\3\23"+
		"\3\23\5\23c\n\23\3\24\6\24f\n\24\r\24\16\24g\3\24\3\24\2\2\25\3\3\5\4"+
		"\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\2!\2"+
		"#\2%\2\'\21\3\2\6\4\2C\\c|\4\2\62;aa\3\2\63;\5\2\13\f\17\17\"\"\2l\2\3"+
		"\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2"+
		"\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31"+
		"\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\'\3\2\2\2\3)\3\2\2\2\5/\3\2\2\2\7"+
		"\64\3\2\2\2\t\66\3\2\2\2\138\3\2\2\2\r:\3\2\2\2\17<\3\2\2\2\21>\3\2\2"+
		"\2\23@\3\2\2\2\25B\3\2\2\2\27D\3\2\2\2\31F\3\2\2\2\33O\3\2\2\2\35Q\3\2"+
		"\2\2\37X\3\2\2\2!\\\3\2\2\2#^\3\2\2\2%b\3\2\2\2\'e\3\2\2\2)*\7e\2\2*+"+
		"\7n\2\2+,\7c\2\2,-\7u\2\2-.\7u\2\2.\4\3\2\2\2/\60\7o\2\2\60\61\7c\2\2"+
		"\61\62\7k\2\2\62\63\7p\2\2\63\6\3\2\2\2\64\65\7.\2\2\65\b\3\2\2\2\66\67"+
		"\7-\2\2\67\n\3\2\2\289\7/\2\29\f\3\2\2\2:;\7,\2\2;\16\3\2\2\2<=\7\61\2"+
		"\2=\20\3\2\2\2>?\7}\2\2?\22\3\2\2\2@A\7\177\2\2A\24\3\2\2\2BC\7*\2\2C"+
		"\26\3\2\2\2DE\7+\2\2E\30\3\2\2\2FG\7\60\2\2G\32\3\2\2\2HJ\5#\22\2IK\5"+
		"%\23\2JI\3\2\2\2KL\3\2\2\2LJ\3\2\2\2LM\3\2\2\2MP\3\2\2\2NP\5%\23\2OH\3"+
		"\2\2\2ON\3\2\2\2P\34\3\2\2\2QU\5\37\20\2RT\5!\21\2SR\3\2\2\2TW\3\2\2\2"+
		"US\3\2\2\2UV\3\2\2\2V\36\3\2\2\2WU\3\2\2\2XY\t\2\2\2Y \3\2\2\2Z]\5\37"+
		"\20\2[]\t\3\2\2\\Z\3\2\2\2\\[\3\2\2\2]\"\3\2\2\2^_\t\4\2\2_$\3\2\2\2`"+
		"c\7\62\2\2ac\5#\22\2b`\3\2\2\2ba\3\2\2\2c&\3\2\2\2df\t\5\2\2ed\3\2\2\2"+
		"fg\3\2\2\2ge\3\2\2\2gh\3\2\2\2hi\3\2\2\2ij\b\24\2\2j(\3\2\2\2\t\2LOU\\"+
		"bg\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}