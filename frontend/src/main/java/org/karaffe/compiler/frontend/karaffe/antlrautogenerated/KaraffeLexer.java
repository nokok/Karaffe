// Generated from Karaffe.g4 by ANTLR 4.5
package org.karaffe.compiler.frontend.karaffe.antlrautogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class KaraffeLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, PLUS=2, MINUS=3, MUL=4, DIV=5, LPAREN=6, RPAREN=7, IntegerLiteral=8, 
		Whitespace=9;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "PLUS", "MINUS", "MUL", "DIV", "LPAREN", "RPAREN", "IntegerLiteral", 
		"NonZeroDigit", "Digit", "Whitespace"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'println'", "'+'", "'-'", "'*'", "'/'", "'('", "')'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "PLUS", "MINUS", "MUL", "DIV", "LPAREN", "RPAREN", "IntegerLiteral", 
		"Whitespace"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public KaraffeLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Karaffe.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\13C\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3"+
		"\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\6\t\60\n\t\r\t\16\t\61\3\t\5\t\65\n\t\3"+
		"\n\3\n\3\13\3\13\5\13;\n\13\3\f\6\f>\n\f\r\f\16\f?\3\f\3\f\2\2\r\3\3\5"+
		"\4\7\5\t\6\13\7\r\b\17\t\21\n\23\2\25\2\27\13\3\2\4\3\2\63;\5\2\13\f\17"+
		"\17\"\"D\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2"+
		"\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\27\3\2\2\2\3\31\3\2\2\2\5!\3"+
		"\2\2\2\7#\3\2\2\2\t%\3\2\2\2\13\'\3\2\2\2\r)\3\2\2\2\17+\3\2\2\2\21\64"+
		"\3\2\2\2\23\66\3\2\2\2\25:\3\2\2\2\27=\3\2\2\2\31\32\7r\2\2\32\33\7t\2"+
		"\2\33\34\7k\2\2\34\35\7p\2\2\35\36\7v\2\2\36\37\7n\2\2\37 \7p\2\2 \4\3"+
		"\2\2\2!\"\7-\2\2\"\6\3\2\2\2#$\7/\2\2$\b\3\2\2\2%&\7,\2\2&\n\3\2\2\2\'"+
		"(\7\61\2\2(\f\3\2\2\2)*\7*\2\2*\16\3\2\2\2+,\7+\2\2,\20\3\2\2\2-/\5\23"+
		"\n\2.\60\5\25\13\2/.\3\2\2\2\60\61\3\2\2\2\61/\3\2\2\2\61\62\3\2\2\2\62"+
		"\65\3\2\2\2\63\65\5\25\13\2\64-\3\2\2\2\64\63\3\2\2\2\65\22\3\2\2\2\66"+
		"\67\t\2\2\2\67\24\3\2\2\28;\7\62\2\29;\5\23\n\2:8\3\2\2\2:9\3\2\2\2;\26"+
		"\3\2\2\2<>\t\3\2\2=<\3\2\2\2>?\3\2\2\2?=\3\2\2\2?@\3\2\2\2@A\3\2\2\2A"+
		"B\b\f\2\2B\30\3\2\2\2\7\2\61\64:?\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}