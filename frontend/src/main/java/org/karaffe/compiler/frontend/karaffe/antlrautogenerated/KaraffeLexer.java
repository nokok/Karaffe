// Generated from Karaffe.g4 by ANTLR 4.7.1
package org.karaffe.compiler.frontend.karaffe.antlrautogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class KaraffeLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		CLASS=1, WHILE=2, MAIN=3, ELSE=4, THIS=5, NEW=6, LET=7, AS=8, IS=9, EQEQEQ=10, 
		NOTEQEQ=11, CRANGE=12, RANGE=13, IF=14, POW=15, AND=16, OR=17, EQEQ=18, 
		NOTEQ=19, LE=20, GE=21, GT=22, LT=23, BANG=24, COMMA=25, PLUS=26, MINUS=27, 
		MUL=28, DIV=29, MOD=30, EQ=31, QUOTE=32, DQUOTE=33, LPAREN=34, RPAREN=35, 
		LBRACE=36, RBRACE=37, LBRACK=38, RBRACK=39, SEMI=40, DOT=41, StringLiteral=42, 
		IntegerLiteral=43, Identifier=44, Whitespace=45;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"CLASS", "WHILE", "MAIN", "ELSE", "THIS", "NEW", "LET", "AS", "IS", "EQEQEQ", 
		"NOTEQEQ", "CRANGE", "RANGE", "IF", "POW", "AND", "OR", "EQEQ", "NOTEQ", 
		"LE", "GE", "GT", "LT", "BANG", "COMMA", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "EQ", "QUOTE", "DQUOTE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMI", "DOT", "StringLiteral", "StringChars", "StringChar", 
		"EscapeSeq", "IntegerLiteral", "Identifier", "IdentifierHead", "IdentifierBody", 
		"NonZeroDigit", "Digit", "Whitespace"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'class'", "'while'", "'main'", "'else'", "'this'", "'new'", "'let'", 
		"'as'", "'is'", "'==='", "'!=='", "'..<'", "'..'", "'if'", "'**'", "'&&'", 
		"'||'", "'=='", "'!='", "'<='", "'>='", "'>'", "'<'", "'!'", "','", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'='", "'''", "'\"'", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "';'", "'.'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "CLASS", "WHILE", "MAIN", "ELSE", "THIS", "NEW", "LET", "AS", "IS", 
		"EQEQEQ", "NOTEQEQ", "CRANGE", "RANGE", "IF", "POW", "AND", "OR", "EQEQ", 
		"NOTEQ", "LE", "GE", "GT", "LT", "BANG", "COMMA", "PLUS", "MINUS", "MUL", 
		"DIV", "MOD", "EQ", "QUOTE", "DQUOTE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMI", "DOT", "StringLiteral", "IntegerLiteral", 
		"Identifier", "Whitespace"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public KaraffeLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Karaffe.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/\u0118\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4"+
		"\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3"+
		"\b\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f"+
		"\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\21"+
		"\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25"+
		"\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34"+
		"\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3"+
		"%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\5+\u00e6\n+\3+\3+\3,\6,\u00eb"+
		"\n,\r,\16,\u00ec\3-\3-\5-\u00f1\n-\3.\3.\3.\3/\3/\6/\u00f8\n/\r/\16/\u00f9"+
		"\3/\5/\u00fd\n/\3\60\3\60\7\60\u0101\n\60\f\60\16\60\u0104\13\60\3\61"+
		"\3\61\3\62\3\62\5\62\u010a\n\62\3\63\3\63\3\64\3\64\5\64\u0110\n\64\3"+
		"\65\6\65\u0113\n\65\r\65\16\65\u0114\3\65\3\65\2\2\66\3\3\5\4\7\5\t\6"+
		"\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24"+
		"\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K"+
		"\'M(O)Q*S+U,W\2Y\2[\2]-_.a\2c\2e\2g\2i/\3\2\b\6\2\f\f\17\17$$^^\n\2$$"+
		"))^^ddhhppttvw\4\2C\\c|\4\2\62;aa\3\2\63;\5\2\13\f\17\17\"\"\2\u0119\2"+
		"\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2"+
		"\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2"+
		"\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2"+
		"\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2"+
		"\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2"+
		"\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2"+
		"\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U"+
		"\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5q\3\2\2\2\7w\3\2"+
		"\2\2\t|\3\2\2\2\13\u0081\3\2\2\2\r\u0086\3\2\2\2\17\u008a\3\2\2\2\21\u008e"+
		"\3\2\2\2\23\u0091\3\2\2\2\25\u0094\3\2\2\2\27\u0098\3\2\2\2\31\u009c\3"+
		"\2\2\2\33\u00a0\3\2\2\2\35\u00a3\3\2\2\2\37\u00a6\3\2\2\2!\u00a9\3\2\2"+
		"\2#\u00ac\3\2\2\2%\u00af\3\2\2\2\'\u00b2\3\2\2\2)\u00b5\3\2\2\2+\u00b8"+
		"\3\2\2\2-\u00bb\3\2\2\2/\u00bd\3\2\2\2\61\u00bf\3\2\2\2\63\u00c1\3\2\2"+
		"\2\65\u00c3\3\2\2\2\67\u00c5\3\2\2\29\u00c7\3\2\2\2;\u00c9\3\2\2\2=\u00cb"+
		"\3\2\2\2?\u00cd\3\2\2\2A\u00cf\3\2\2\2C\u00d1\3\2\2\2E\u00d3\3\2\2\2G"+
		"\u00d5\3\2\2\2I\u00d7\3\2\2\2K\u00d9\3\2\2\2M\u00db\3\2\2\2O\u00dd\3\2"+
		"\2\2Q\u00df\3\2\2\2S\u00e1\3\2\2\2U\u00e3\3\2\2\2W\u00ea\3\2\2\2Y\u00f0"+
		"\3\2\2\2[\u00f2\3\2\2\2]\u00fc\3\2\2\2_\u00fe\3\2\2\2a\u0105\3\2\2\2c"+
		"\u0109\3\2\2\2e\u010b\3\2\2\2g\u010f\3\2\2\2i\u0112\3\2\2\2kl\7e\2\2l"+
		"m\7n\2\2mn\7c\2\2no\7u\2\2op\7u\2\2p\4\3\2\2\2qr\7y\2\2rs\7j\2\2st\7k"+
		"\2\2tu\7n\2\2uv\7g\2\2v\6\3\2\2\2wx\7o\2\2xy\7c\2\2yz\7k\2\2z{\7p\2\2"+
		"{\b\3\2\2\2|}\7g\2\2}~\7n\2\2~\177\7u\2\2\177\u0080\7g\2\2\u0080\n\3\2"+
		"\2\2\u0081\u0082\7v\2\2\u0082\u0083\7j\2\2\u0083\u0084\7k\2\2\u0084\u0085"+
		"\7u\2\2\u0085\f\3\2\2\2\u0086\u0087\7p\2\2\u0087\u0088\7g\2\2\u0088\u0089"+
		"\7y\2\2\u0089\16\3\2\2\2\u008a\u008b\7n\2\2\u008b\u008c\7g\2\2\u008c\u008d"+
		"\7v\2\2\u008d\20\3\2\2\2\u008e\u008f\7c\2\2\u008f\u0090\7u\2\2\u0090\22"+
		"\3\2\2\2\u0091\u0092\7k\2\2\u0092\u0093\7u\2\2\u0093\24\3\2\2\2\u0094"+
		"\u0095\7?\2\2\u0095\u0096\7?\2\2\u0096\u0097\7?\2\2\u0097\26\3\2\2\2\u0098"+
		"\u0099\7#\2\2\u0099\u009a\7?\2\2\u009a\u009b\7?\2\2\u009b\30\3\2\2\2\u009c"+
		"\u009d\7\60\2\2\u009d\u009e\7\60\2\2\u009e\u009f\7>\2\2\u009f\32\3\2\2"+
		"\2\u00a0\u00a1\7\60\2\2\u00a1\u00a2\7\60\2\2\u00a2\34\3\2\2\2\u00a3\u00a4"+
		"\7k\2\2\u00a4\u00a5\7h\2\2\u00a5\36\3\2\2\2\u00a6\u00a7\7,\2\2\u00a7\u00a8"+
		"\7,\2\2\u00a8 \3\2\2\2\u00a9\u00aa\7(\2\2\u00aa\u00ab\7(\2\2\u00ab\"\3"+
		"\2\2\2\u00ac\u00ad\7~\2\2\u00ad\u00ae\7~\2\2\u00ae$\3\2\2\2\u00af\u00b0"+
		"\7?\2\2\u00b0\u00b1\7?\2\2\u00b1&\3\2\2\2\u00b2\u00b3\7#\2\2\u00b3\u00b4"+
		"\7?\2\2\u00b4(\3\2\2\2\u00b5\u00b6\7>\2\2\u00b6\u00b7\7?\2\2\u00b7*\3"+
		"\2\2\2\u00b8\u00b9\7@\2\2\u00b9\u00ba\7?\2\2\u00ba,\3\2\2\2\u00bb\u00bc"+
		"\7@\2\2\u00bc.\3\2\2\2\u00bd\u00be\7>\2\2\u00be\60\3\2\2\2\u00bf\u00c0"+
		"\7#\2\2\u00c0\62\3\2\2\2\u00c1\u00c2\7.\2\2\u00c2\64\3\2\2\2\u00c3\u00c4"+
		"\7-\2\2\u00c4\66\3\2\2\2\u00c5\u00c6\7/\2\2\u00c68\3\2\2\2\u00c7\u00c8"+
		"\7,\2\2\u00c8:\3\2\2\2\u00c9\u00ca\7\61\2\2\u00ca<\3\2\2\2\u00cb\u00cc"+
		"\7\'\2\2\u00cc>\3\2\2\2\u00cd\u00ce\7?\2\2\u00ce@\3\2\2\2\u00cf\u00d0"+
		"\7)\2\2\u00d0B\3\2\2\2\u00d1\u00d2\7$\2\2\u00d2D\3\2\2\2\u00d3\u00d4\7"+
		"*\2\2\u00d4F\3\2\2\2\u00d5\u00d6\7+\2\2\u00d6H\3\2\2\2\u00d7\u00d8\7}"+
		"\2\2\u00d8J\3\2\2\2\u00d9\u00da\7\177\2\2\u00daL\3\2\2\2\u00db\u00dc\7"+
		"]\2\2\u00dcN\3\2\2\2\u00dd\u00de\7_\2\2\u00deP\3\2\2\2\u00df\u00e0\7="+
		"\2\2\u00e0R\3\2\2\2\u00e1\u00e2\7\60\2\2\u00e2T\3\2\2\2\u00e3\u00e5\5"+
		"C\"\2\u00e4\u00e6\5W,\2\u00e5\u00e4\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6"+
		"\u00e7\3\2\2\2\u00e7\u00e8\5C\"\2\u00e8V\3\2\2\2\u00e9\u00eb\5Y-\2\u00ea"+
		"\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ec\u00ed\3\2"+
		"\2\2\u00edX\3\2\2\2\u00ee\u00f1\n\2\2\2\u00ef\u00f1\5[.\2\u00f0\u00ee"+
		"\3\2\2\2\u00f0\u00ef\3\2\2\2\u00f1Z\3\2\2\2\u00f2\u00f3\7^\2\2\u00f3\u00f4"+
		"\t\3\2\2\u00f4\\\3\2\2\2\u00f5\u00f7\5e\63\2\u00f6\u00f8\5g\64\2\u00f7"+
		"\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2"+
		"\2\2\u00fa\u00fd\3\2\2\2\u00fb\u00fd\5g\64\2\u00fc\u00f5\3\2\2\2\u00fc"+
		"\u00fb\3\2\2\2\u00fd^\3\2\2\2\u00fe\u0102\5a\61\2\u00ff\u0101\5c\62\2"+
		"\u0100\u00ff\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100\3\2\2\2\u0102\u0103"+
		"\3\2\2\2\u0103`\3\2\2\2\u0104\u0102\3\2\2\2\u0105\u0106\t\4\2\2\u0106"+
		"b\3\2\2\2\u0107\u010a\5a\61\2\u0108\u010a\t\5\2\2\u0109\u0107\3\2\2\2"+
		"\u0109\u0108\3\2\2\2\u010ad\3\2\2\2\u010b\u010c\t\6\2\2\u010cf\3\2\2\2"+
		"\u010d\u0110\7\62\2\2\u010e\u0110\5e\63\2\u010f\u010d\3\2\2\2\u010f\u010e"+
		"\3\2\2\2\u0110h\3\2\2\2\u0111\u0113\t\7\2\2\u0112\u0111\3\2\2\2\u0113"+
		"\u0114\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0116\3\2"+
		"\2\2\u0116\u0117\b\65\2\2\u0117j\3\2\2\2\f\2\u00e5\u00ec\u00f0\u00f9\u00fc"+
		"\u0102\u0109\u010f\u0114\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}