package org.karaffe.compiler.launcher;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.karaffe.compiler.base.util.SystemPropertyConfigurator;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeLexer;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeParser;
import org.karaffe.compiler.frontend.karaffe.ast.CompilationUnit;
import org.karaffe.compiler.frontend.karaffe.listener.ASTBuilder;
import org.karaffe.compiler.frontend.karaffe.transformer.AbstractTransformer;
import org.karaffe.compiler.frontend.karaffe.transformer.TransformerBuilder;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

public class KaraffeCompilerLauncher {
    public static void main(String[] args) throws Exception {
        new KaraffeCompilerLauncher().run(args);
    }

    private void run(String[] args) throws Exception {
        if (args.length == 0) {
            System.out.println(usage());
            return;
        }
        new SystemPropertyConfigurator(args).updateSystemProperty();

        Set<AbstractTransformer> transformers = new TransformerBuilder().getTransformers();
        final boolean isShowPhases = hasFlag("--show-phases", args);
        if (isShowPhases) {
            transformers.stream().map(AbstractTransformer::getTransformerName).forEach(System.out::println);
        }

        List<File> files = Arrays.stream(args).map(File::new).filter(File::exists).collect(Collectors.toList());

        ASTBuilder astBuilder = new ASTBuilder();
        Map<String, KaraffeParser.CompilationUnitContext> contexts = new HashMap<>(files.size());

        for (File file : files) {
            String fileName = file.getAbsolutePath();
            KaraffeLexer lexer = new KaraffeLexer(new ANTLRFileStream(fileName));
            lexer.removeErrorListeners();
            lexer.addErrorListener(astBuilder);
            KaraffeParser parser = new KaraffeParser(new CommonTokenStream(lexer));
            parser.removeErrorListeners();
            parser.removeParseListeners();
            parser.addParseListener(astBuilder);
            parser.addErrorListener(astBuilder);
            KaraffeParser.CompilationUnitContext context = parser.compilationUnit();
            contexts.put(fileName, context);

            if (astBuilder.hasError()) {
                return;
            }
        }

        CompilationUnit compilationUnit = astBuilder.getCompilationUnit();

        final boolean isPrintTree = hasFlag("--print-tree", args);

        if (isPrintTree) {
            System.out.println("===");
            System.out.println(compilationUnit);
        }

        CompilationUnit cu = compilationUnit;
        for (AbstractTransformer transformer : transformers) {
            cu = transformer.transform(cu);
            if (isPrintTree) {
                System.out.println("=== After : " + transformer.getTransformerName() + " ===");
                System.out.println(cu);
            }
        }
    }

    private boolean hasFlag(String flagName, String[] args) {
        return Arrays.stream(args).anyMatch(arg -> arg.equals(flagName));
    }

    private String usage() {
        List<String> output = new ArrayList<>();
        output.add("Usage: krfc [source files]");
        output.add("where possible options include:");
        output.add("  --show-phases");
        output.add("  --print-tree");
        return String.join("\n", output);
    }
}
