package org.karaffe.compiler.launcher;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.karaffe.compiler.base.util.SystemPropertyConfigurator;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeLexer;
import org.karaffe.compiler.frontend.karaffe.antlrautogenerated.KaraffeParser;
import org.karaffe.compiler.frontend.karaffe.listener.ASTBuilder;

import java.util.ArrayList;
import java.util.List;

public class KaraffeCompilerLauncher {
    public static void main(String[] args) throws Exception {
        new KaraffeCompilerLauncher().run(args);
    }

    private void run(String[] args) throws Exception {
        if (args.length == 0) {
            System.out.println(usage());
            return;
        }
        new LibraryLoader().loadJars();
        new SystemPropertyConfigurator(args).updateSystemProperty();

        KaraffeLexer lexer = new KaraffeLexer(new ANTLRFileStream(args[0]));
        ASTBuilder astBuilder = new ASTBuilder();
        lexer.removeErrorListeners();
        lexer.addErrorListener(astBuilder);
        KaraffeParser parser = new KaraffeParser(new CommonTokenStream(lexer));
        parser.removeErrorListeners();
        parser.removeParseListeners();
        parser.addParseListener(astBuilder);
        parser.addErrorListener(astBuilder);
        parser.compilationUnit();

        if (!astBuilder.hasError()) {
            System.out.println(astBuilder.getCompilationUnit());
        }
    }

    private String usage() {
        List<String> output = new ArrayList<>();
        output.add("Usage: krfc [source files]");
        return String.join("\n", output);
    }
}
